// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package trainingproject.apicallget_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: apiCallGet Purpose: Get Json from an Api and store in into an sqlite
 * database<br>
 * Description: test my skills after just watching the video <br>
 * 
 * @author sylvain.boulloud@cognizant.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class apiCallGet implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (DBPATH != null) {

				this.setProperty("DBPATH", DBPATH.toString());

			}

			if (DBNAME != null) {

				this.setProperty("DBNAME", DBNAME.toString());

			}

			if (APIURL != null) {

				this.setProperty("APIURL", APIURL.toString());

			}

			if (LOGFILEPATH != null) {

				this.setProperty("LOGFILEPATH", LOGFILEPATH.toString());

			}

			if (LOGFILENAME != null) {

				this.setProperty("LOGFILENAME", LOGFILENAME.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String DBPATH;

		public String getDBPATH() {
			return this.DBPATH;
		}

		public String DBNAME;

		public String getDBNAME() {
			return this.DBNAME;
		}

		public String APIURL;

		public String getAPIURL() {
			return this.APIURL;
		}

		public String LOGFILEPATH;

		public String getLOGFILEPATH() {
			return this.LOGFILEPATH;
		}

		public String LOGFILENAME;

		public String getLOGFILENAME() {
			return this.LOGFILENAME;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "apiCallGet";
	private final String projectName = "TRAININGPROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					apiCallGet.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(apiCallGet.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError4", 0, "error");
			}

			errorCode = null;
			tDBRollback_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError5", 0, "error");
			}

			errorCode = null;
			tWarn_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRollback_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRollback_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError1", 0, "error");
			}

			errorCode = null;
			tWarn_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRollback_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRollback_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRollback_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError2", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError3", 0, "error");
			}

			errorCode = null;
			tDBRollback_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputJSON_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRollback_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRollback_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRESTClient_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tWarn_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_9 begin ] start
				 */

				ok_Hash.put("tWarn_9", false);
				start_Hash.put("tWarn_9", System.currentTimeMillis());

				currentComponent = "tWarn_9";

				int tos_count_tWarn_9 = 0;

				/**
				 * [tWarn_9 begin ] stop
				 */

				/**
				 * [tWarn_9 main ] start
				 */

				currentComponent = "tWarn_9";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_9", "", Thread.currentThread().getId() + "", "WARN",
							"", "The sqlite database was closed - End of Job", "", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_9", 4, "The sqlite database was closed - End of Job", 200);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_9_WARN_MESSAGES", "The sqlite database was closed - End of Job");
					globalMap.put("tWarn_9_WARN_PRIORITY", 4);
					globalMap.put("tWarn_9_WARN_CODE", 200);

				} catch (Exception e_tWarn_9) {
					globalMap.put("tWarn_9_ERROR_MESSAGE", e_tWarn_9.getMessage());
					logIgnoredError(
							String.format("tWarn_9 - tWarn failed to log message due to internal error: %s", e_tWarn_9),
							e_tWarn_9);
				}

				tos_count_tWarn_9++;

				/**
				 * [tWarn_9 main ] stop
				 */

				/**
				 * [tWarn_9 process_data_begin ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 process_data_begin ] stop
				 */

				/**
				 * [tWarn_9 process_data_end ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 process_data_end ] stop
				 */

				/**
				 * [tWarn_9 end ] start
				 */

				currentComponent = "tWarn_9";

				ok_Hash.put("tWarn_9", true);
				end_Hash.put("tWarn_9", System.currentTimeMillis());

				/**
				 * [tWarn_9 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_9 finally ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_9_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					conn_tDBCommit_1.commit();

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tWarn_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_4 begin ] start
				 */

				ok_Hash.put("tWarn_4", false);
				start_Hash.put("tWarn_4", System.currentTimeMillis());

				currentComponent = "tWarn_4";

				int tos_count_tWarn_4 = 0;

				/**
				 * [tWarn_4 begin ] stop
				 */

				/**
				 * [tWarn_4 main ] start
				 */

				currentComponent = "tWarn_4";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "WARN",
							"", "The transaction in GENERAL table is commited into database", "", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_4", 4,
							"The transaction in GENERAL table is commited into database", 200);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_4_WARN_MESSAGES",
							"The transaction in GENERAL table is commited into database");
					globalMap.put("tWarn_4_WARN_PRIORITY", 4);
					globalMap.put("tWarn_4_WARN_CODE", 200);

				} catch (Exception e_tWarn_4) {
					globalMap.put("tWarn_4_ERROR_MESSAGE", e_tWarn_4.getMessage());
					logIgnoredError(
							String.format("tWarn_4 - tWarn failed to log message due to internal error: %s", e_tWarn_4),
							e_tWarn_4);
				}

				tos_count_tWarn_4++;

				/**
				 * [tWarn_4 main ] stop
				 */

				/**
				 * [tWarn_4 process_data_begin ] start
				 */

				currentComponent = "tWarn_4";

				/**
				 * [tWarn_4 process_data_begin ] stop
				 */

				/**
				 * [tWarn_4 process_data_end ] start
				 */

				currentComponent = "tWarn_4";

				/**
				 * [tWarn_4 process_data_end ] stop
				 */

				/**
				 * [tWarn_4 end ] start
				 */

				currentComponent = "tWarn_4";

				ok_Hash.put("tWarn_4", true);
				end_Hash.put("tWarn_4", System.currentTimeMillis());

				/**
				 * [tWarn_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_4 finally ] start
				 */

				currentComponent = "tWarn_4";

				/**
				 * [tWarn_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_2 begin ] start
				 */

				ok_Hash.put("tDBCommit_2", false);
				start_Hash.put("tDBCommit_2", System.currentTimeMillis());

				currentComponent = "tDBCommit_2";

				int tos_count_tDBCommit_2 = 0;

				/**
				 * [tDBCommit_2 begin ] stop
				 */

				/**
				 * [tDBCommit_2 main ] start
				 */

				currentComponent = "tDBCommit_2";

				java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed()) {

					conn_tDBCommit_2.commit();

				}

				tos_count_tDBCommit_2++;

				/**
				 * [tDBCommit_2 main ] stop
				 */

				/**
				 * [tDBCommit_2 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_2 process_data_end ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_2 end ] start
				 */

				currentComponent = "tDBCommit_2";

				ok_Hash.put("tDBCommit_2", true);
				end_Hash.put("tDBCommit_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tWarn_5Process(globalMap);

				/**
				 * [tDBCommit_2 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_2:OnSubjobOk1", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tFileInputJSON_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_2:OnSubjobOk2", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFileInputXML_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_2:OnSubjobOk3", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_2:OnSubjobOk4", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tFileInputExcel_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_2 finally ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}

	public static class jsonOutput2Struct implements routines.system.IPersistableRow<jsonOutput2Struct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String officeName;

		public String getOfficeName() {
			return this.officeName;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public Integer postalCode;

		public Integer getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final jsonOutput2Struct other = (jsonOutput2Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(jsonOutput2Struct other) {

			other.id = this.id;
			other.officeName = this.officeName;
			other.address = this.address;
			other.locality = this.locality;
			other.postalCode = this.postalCode;
			other.origin = this.origin;

		}

		public void copyKeysDataTo(jsonOutput2Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",officeName=" + officeName);
			sb.append(",address=" + address);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + String.valueOf(postalCode));
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(jsonOutput2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class jsonInputStruct implements routines.system.IPersistableRow<jsonInputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public String officeName;

		public String getOfficeName() {
			return this.officeName;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public Integer postalCode;

		public Integer getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("officeName=" + officeName);
			sb.append(",address=" + address);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + String.valueOf(postalCode));
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(jsonInputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				jsonInputStruct jsonInput = new jsonInputStruct();
				jsonOutput2Struct jsonOutput2 = new jsonOutput2Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "jsonOutput2");
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rowsToCommitCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "OFFICES";
				boolean whetherReject_tDBOutput_3 = false;

				int updateKeyCount_tDBOutput_3 = 1;
				if (updateKeyCount_tDBOutput_3 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_3 == 6 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_3 = null;
				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
				boolean whetherExist_tDBOutput_3 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_3.next()) {
						String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
						if (table_tDBOutput_3.equalsIgnoreCase("OFFICES")) {
							whetherExist_tDBOutput_3 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3
								+ "\"(\"id\" INT  not null ,\"officeName\" VARCHAR(20)  ,\"address\" VARCHAR(50)  ,\"locality\" VARCHAR(15)  ,\"postalCode\" INT ,\"origin\" VARCHAR(0)  ,primary key(\"id\"))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement("SELECT COUNT(1) FROM \"" + "OFFICES" + "\" WHERE \"id\" = ?");
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
				String insert_tDBOutput_3 = "INSERT INTO \"" + "OFFICES"
						+ "\" (\"id\",\"officeName\",\"address\",\"locality\",\"postalCode\",\"origin\") VALUES (?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
				String update_tDBOutput_3 = "UPDATE \"" + "OFFICES"
						+ "\" SET \"officeName\" = ?,\"address\" = ?,\"locality\" = ?,\"postalCode\" = ?,\"origin\" = ? WHERE \"id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(update_tDBOutput_3);
				resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "jsonInput");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
					Integer id;
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				jsonOutput2Struct jsonOutput2_tmp = new jsonOutput2Struct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_1", false);
				start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_1";

				int tos_count_tFileInputJSON_1 = 0;

				class JsonPathCache_tFileInputJSON_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_1 = 0;

				JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

				String loopPath_tFileInputJSON_1 = "$[*]";
				java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_1 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_1 = null;
				try {
					filenameOrStream_tFileInputJSON_1 = "C:/Programmation/TalendTool/data/in/apiCall/offices.json";
				} catch (java.lang.Exception e_tFileInputJSON_1) {
					globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());

					globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
					System.err.println(e_tFileInputJSON_1.getMessage());
				}

				com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = null;
				try {
					if (filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream) {
						is_tFileInputJSON_1 = (java.io.InputStream) filenameOrStream_tFileInputJSON_1;
					} else {

						is_tFileInputJSON_1 = new java.io.FileInputStream((String) filenameOrStream_tFileInputJSON_1);

					}

					document_tFileInputJSON_1 = parseContext_tFileInputJSON_1.parse(is_tFileInputJSON_1, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
							.getCompiledJsonPath(loopPath_tFileInputJSON_1);
					Object result_tFileInputJSON_1 = document_tFileInputJSON_1.read(compiledLoopPath_tFileInputJSON_1,
							net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
					} else {
						resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
					}
				} catch (java.lang.Exception e_tFileInputJSON_1) {
					globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
					globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
					System.err.println(e_tFileInputJSON_1.getMessage());
				} finally {
					if (is_tFileInputJSON_1 != null) {
						is_tFileInputJSON_1.close();
					}
				}

				String jsonPath_tFileInputJSON_1 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

				Object value_tFileInputJSON_1 = null;
				Object root_tFileInputJSON_1 = null;
				for (Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
					nb_line_tFileInputJSON_1++;
					jsonInput = null;
					boolean whetherReject_tFileInputJSON_1 = false;
					jsonInput = new jsonInputStruct();

					try {
						jsonPath_tFileInputJSON_1 = "officeName";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							jsonInput.officeName = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							jsonInput.officeName =

									null;
						}
						jsonPath_tFileInputJSON_1 = "address";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							jsonInput.address = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							jsonInput.address =

									null;
						}
						jsonPath_tFileInputJSON_1 = "locality";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							jsonInput.locality = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							jsonInput.locality =

									null;
						}
						jsonPath_tFileInputJSON_1 = "postalCode";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
								jsonInput.postalCode = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
							} else {
								jsonInput.postalCode =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							jsonInput.postalCode =

									null;
						}
						jsonPath_tFileInputJSON_1 = "origin";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							jsonInput.origin = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							jsonInput.origin =

									null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_1) {
						globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
						whetherReject_tFileInputJSON_1 = true;
						System.err.println(e_tFileInputJSON_1.getMessage());
						jsonInput = null;
						globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
					}
//}

					/**
					 * [tFileInputJSON_1 begin ] stop
					 */

					/**
					 * [tFileInputJSON_1 main ] start
					 */

					currentComponent = "tFileInputJSON_1";

					tos_count_tFileInputJSON_1++;

					/**
					 * [tFileInputJSON_1 main ] stop
					 */

					/**
					 * [tFileInputJSON_1 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_begin ] stop
					 */
// Start of branch "jsonInput"
					if (jsonInput != null) {

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "jsonInput"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;
							Var.id = Numeric.sequence("s1", 1, 1);// ###############################
							// ###############################
							// # Output tables

							jsonOutput2 = null;

// # Output table : 'jsonOutput2'
							jsonOutput2_tmp.id = Var.id;
							jsonOutput2_tmp.officeName = jsonInput.officeName;
							jsonOutput2_tmp.address = jsonInput.address;
							jsonOutput2_tmp.locality = jsonInput.locality;
							jsonOutput2_tmp.postalCode = jsonInput.postalCode;
							jsonOutput2_tmp.origin = jsonInput.origin;
							jsonOutput2 = jsonOutput2_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "jsonOutput2"
						if (jsonOutput2 != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "jsonOutput2"

								);
							}

							whetherReject_tDBOutput_3 = false;

							pstmt_tDBOutput_3.setInt(1, jsonOutput2.id);

							int checkCount_tDBOutput_3 = -1;
							try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
								while (rs_tDBOutput_3.next()) {
									checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
								}
							}
							if (checkCount_tDBOutput_3 > 0) {
								if (jsonOutput2.officeName == null) {
									pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(1, jsonOutput2.officeName);
								}

								if (jsonOutput2.address == null) {
									pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(2, jsonOutput2.address);
								}

								if (jsonOutput2.locality == null) {
									pstmtUpdate_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(3, jsonOutput2.locality);
								}

								if (jsonOutput2.postalCode == null) {
									pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_3.setInt(4, jsonOutput2.postalCode);
								}

								if (jsonOutput2.origin == null) {
									pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_3.setString(5, jsonOutput2.origin);
								}

								pstmtUpdate_tDBOutput_3.setInt(6, jsonOutput2.id);

								try {
									int processedCount_tDBOutput_3 = pstmtUpdate_tDBOutput_3.executeUpdate();
									updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
									rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
									nb_line_tDBOutput_3++;
								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());
									whetherReject_tDBOutput_3 = true;
									nb_line_tDBOutput_3++;
									System.err.print(e.getMessage());
								}
							} else {
								pstmtInsert_tDBOutput_3.setInt(1, jsonOutput2.id);

								if (jsonOutput2.officeName == null) {
									pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(2, jsonOutput2.officeName);
								}

								if (jsonOutput2.address == null) {
									pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(3, jsonOutput2.address);
								}

								if (jsonOutput2.locality == null) {
									pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(4, jsonOutput2.locality);
								}

								if (jsonOutput2.postalCode == null) {
									pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_3.setInt(5, jsonOutput2.postalCode);
								}

								if (jsonOutput2.origin == null) {
									pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(6, jsonOutput2.origin);
								}

								try {
									int processedCount_tDBOutput_3 = pstmtInsert_tDBOutput_3.executeUpdate();
									insertedCount_tDBOutput_3 += processedCount_tDBOutput_3;
									rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
									nb_line_tDBOutput_3++;
								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());
									whetherReject_tDBOutput_3 = true;
									nb_line_tDBOutput_3++;
									System.err.print(e.getMessage());
								}
							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "jsonOutput2"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

					} // End of branch "jsonInput"

					/**
					 * [tFileInputJSON_1 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_1 end ] start
					 */

					currentComponent = "tFileInputJSON_1";

				}
				globalMap.put("tFileInputJSON_1_NB_LINE", nb_line_tFileInputJSON_1);

				ok_Hash.put("tFileInputJSON_1", true);
				end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "jsonInput");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (pstmtUpdate_tDBOutput_3 != null) {
					pstmtUpdate_tDBOutput_3.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_3");
				}
				if (pstmtInsert_tDBOutput_3 != null) {
					pstmtInsert_tDBOutput_3.close();
					resourceMap.remove("pstmtInsert_tDBOutput_3");
				}
				if (pstmt_tDBOutput_3 != null) {
					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				int rejectedCount_tDBOutput_3 = 0;
				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "jsonOutput2");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_1 finally ] start
				 */

				currentComponent = "tFileInputJSON_1";

				/**
				 * [tFileInputJSON_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
					if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_3")) != null) {
						pstmtUpdateToClose_tDBOutput_3.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
					if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_3")) != null) {
						pstmtInsertToClose_tDBOutput_3.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 1);
	}

	public static class XmlOutputStruct implements routines.system.IPersistableRow<XmlOutputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String officeName;

		public String getOfficeName() {
			return this.officeName;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public Integer postalCode;

		public Integer getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final XmlOutputStruct other = (XmlOutputStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(XmlOutputStruct other) {

			other.id = this.id;
			other.officeName = this.officeName;
			other.address = this.address;
			other.locality = this.locality;
			other.postalCode = this.postalCode;
			other.origin = this.origin;

		}

		public void copyKeysDataTo(XmlOutputStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",officeName=" + officeName);
			sb.append(",address=" + address);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + String.valueOf(postalCode));
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(XmlOutputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class XmlInputStruct implements routines.system.IPersistableRow<XmlInputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public String officeName;

		public String getOfficeName() {
			return this.officeName;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public Integer postalCode;

		public Integer getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("officeName=" + officeName);
			sb.append(",address=" + address);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + String.valueOf(postalCode));
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(XmlInputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				XmlInputStruct XmlInput = new XmlInputStruct();
				XmlOutputStruct XmlOutput = new XmlOutputStruct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "XmlOutput");
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rowsToCommitCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "OFFICES";
				boolean whetherReject_tDBOutput_4 = false;

				int updateKeyCount_tDBOutput_4 = 1;
				if (updateKeyCount_tDBOutput_4 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_4 == 6 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_4 = null;
				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
				boolean whetherExist_tDBOutput_4 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_4.next()) {
						String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
						if (table_tDBOutput_4.equalsIgnoreCase("OFFICES")) {
							whetherExist_tDBOutput_4 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
						stmtCreate_tDBOutput_4.execute("CREATE TABLE \"" + tableName_tDBOutput_4
								+ "\"(\"id\" INT  not null ,\"officeName\" VARCHAR(20)  ,\"address\" VARCHAR(50)  ,\"locality\" VARCHAR(15)  ,\"postalCode\" INT ,\"origin\" VARCHAR(0)  ,primary key(\"id\"))");
					}
				}
				String update_tDBOutput_4 = "UPDATE \"" + "OFFICES"
						+ "\" SET \"officeName\" = ?,\"address\" = ?,\"locality\" = ?,\"postalCode\" = ?,\"origin\" = ? WHERE \"id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(update_tDBOutput_4);
				resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
				String insert_tDBOutput_4 = "INSERT INTO \"" + "OFFICES"
						+ "\" (\"id\",\"officeName\",\"address\",\"locality\",\"postalCode\",\"origin\") VALUES (?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "XmlInput");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
					Integer id;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				XmlOutputStruct XmlOutput_tmp = new XmlOutputStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class NameSpaceTool_tFileInputXML_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put("pre" + defualtNSPath.size(), ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
										path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression, String basePath) {
						return util.addDefaultNSPrefix(relativeXpression, basePath);
					}

				}

				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = "C:/Programmation/TalendTool/data/in/apiCall/offices.xml";
				} catch (java.lang.Exception e) {
					globalMap.put("tFileInputXML_1_ERROR_MESSAGE", e.getMessage());

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_1 = true;
				org.dom4j.Document doc_tFileInputXML_1 = null;
				java.io.Closeable toClose_tFileInputXML_1 = null;
				try {
					if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
						toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
						doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
								new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)), "UTF-8");
						toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
						org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_1);
						doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
					}
				} catch (java.lang.Exception e) {
					globalMap.put("tFileInputXML_1_ERROR_MESSAGE", e.getMessage());

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_1 = false;
				} finally {
					if (toClose_tFileInputXML_1 != null) {
						toClose_tFileInputXML_1.close();
					}
				}
				if (isValidFile_tFileInputXML_1) {
					NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
					nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
							.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/root/office"));
					x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) x_tFileInputXML_1
							.selectNodes(doc_tFileInputXML_1);
					XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
					String str_tFileInputXML_1 = "";
					org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
					java.util.Map<Integer, org.dom4j.XPath> xpaths_tFileInputXML_1 = new java.util.HashMap<Integer, org.dom4j.XPath>();
					class XPathUtil_tFileInputXML_1 {

						public void initXPaths_0(java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_1 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("officeName", "/root/office"));
							xpath_0.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(0, xpath_0);

							org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("address", "/root/office"));
							xpath_1.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(1, xpath_1);

							org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("locality", "/root/office"));
							xpath_2.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(2, xpath_2);

							org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("postalCode", "/root/office"));
							xpath_3.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(3, xpath_3);

							org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper
									.createXPath(nsTool.addDefaultNSPrefix("origin", "/root/office"));
							xpath_4.setNamespaceURIs(xmlNameSpaceMap);

							xpaths.put(4, xpath_4);

						}

						public void initXPaths(java.util.Map<Integer, org.dom4j.XPath> xpaths,
								NameSpaceTool_tFileInputXML_1 nsTool,
								java.util.HashMap<String, String> xmlNameSpaceMap) {

							initXPaths_0(xpaths, nsTool, xmlNameSpaceMap);

						}
					}
					XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
					xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1,
							xmlNameSpaceMap_tFileInputXML_1);
					for (org.dom4j.Node temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
						if (nb_line_tFileInputXML_1 >= 2) {

							break;
						}
						nb_line_tFileInputXML_1++;

						XmlInput = null;
						boolean whetherReject_tFileInputXML_1 = false;
						XmlInput = new XmlInputStruct();
						try {
							Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
							if (obj0_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj0_tFileInputXML_1 instanceof String
									|| obj0_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
							} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								XmlInput.officeName = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)) {
								XmlInput.officeName = "";
							} else if (xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								XmlInput.officeName = null;
							} else {
								XmlInput.officeName = str_tFileInputXML_1;
							}
							Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
							if (obj1_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj1_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj1_tFileInputXML_1 instanceof String
									|| obj1_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
							} else if (obj1_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								XmlInput.address = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)) {
								XmlInput.address = "";
							} else if (xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								XmlInput.address = null;
							} else {
								XmlInput.address = str_tFileInputXML_1;
							}
							Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
							if (obj2_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj2_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj2_tFileInputXML_1 instanceof String
									|| obj2_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
							} else if (obj2_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								XmlInput.locality = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)) {
								XmlInput.locality = "";
							} else if (xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								XmlInput.locality = null;
							} else {
								XmlInput.locality = str_tFileInputXML_1;
							}
							Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
							if (obj3_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj3_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj3_tFileInputXML_1 instanceof String
									|| obj3_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
							} else if (obj3_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								XmlInput.postalCode = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)
									|| xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								XmlInput.postalCode = null;
							} else {
								XmlInput.postalCode = ParserUtils.parseTo_Integer(str_tFileInputXML_1);
							}
							Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
							if (obj4_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj4_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
										org.jaxen.dom4j.DocumentNavigator.getInstance());
							} else if (obj4_tFileInputXML_1 instanceof String
									|| obj4_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
							} else if (obj4_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj4_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1.size() > 0 ? nodes_tFileInputXML_1.get(0)
										: null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator.getInstance());
							}
							if (xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)) {
								XmlInput.origin = null;
							} else if (xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)) {
								XmlInput.origin = "";
							} else if (xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1)) {
								XmlInput.origin = null;
							} else {
								XmlInput.origin = str_tFileInputXML_1;
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputXML_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputXML_1 = true;
							System.err.println(e.getMessage());
							XmlInput = null;
						}

						/**
						 * [tFileInputXML_1 begin ] stop
						 */

						/**
						 * [tFileInputXML_1 main ] start
						 */

						currentComponent = "tFileInputXML_1";

						tos_count_tFileInputXML_1++;

						/**
						 * [tFileInputXML_1 main ] stop
						 */

						/**
						 * [tFileInputXML_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputXML_1";

						/**
						 * [tFileInputXML_1 process_data_begin ] stop
						 */
// Start of branch "XmlInput"
						if (XmlInput != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "XmlInput"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;
								Var.id = Numeric.sequence("s1", 1, 1);// ###############################
								// ###############################
								// # Output tables

								XmlOutput = null;

// # Output table : 'XmlOutput'
								XmlOutput_tmp.id = Var.id;
								XmlOutput_tmp.officeName = XmlInput.officeName;
								XmlOutput_tmp.address = XmlInput.address;
								XmlOutput_tmp.locality = XmlInput.locality;
								XmlOutput_tmp.postalCode = XmlInput.postalCode;
								XmlOutput_tmp.origin = XmlInput.origin;
								XmlOutput = XmlOutput_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "XmlOutput"
							if (XmlOutput != null) {

								/**
								 * [tDBOutput_4 main ] start
								 */

								currentComponent = "tDBOutput_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "XmlOutput"

									);
								}

								whetherReject_tDBOutput_4 = false;
								int updateFlag_tDBOutput_4 = 0;
								if (XmlOutput.officeName == null) {
									pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_4.setString(1, XmlOutput.officeName);
								}

								if (XmlOutput.address == null) {
									pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_4.setString(2, XmlOutput.address);
								}

								if (XmlOutput.locality == null) {
									pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_4.setString(3, XmlOutput.locality);
								}

								if (XmlOutput.postalCode == null) {
									pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tDBOutput_4.setInt(4, XmlOutput.postalCode);
								}

								if (XmlOutput.origin == null) {
									pstmtUpdate_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_4.setString(5, XmlOutput.origin);
								}

								pstmtUpdate_tDBOutput_4.setInt(6, XmlOutput.id);

								try {
									updateFlag_tDBOutput_4 = pstmtUpdate_tDBOutput_4.executeUpdate();
									updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4 + updateFlag_tDBOutput_4;
									rowsToCommitCount_tDBOutput_4 += updateFlag_tDBOutput_4;
								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());
									whetherReject_tDBOutput_4 = true;
									System.err.print(e.getMessage());
								}
								if (updateFlag_tDBOutput_4 == 0) {

									pstmtInsert_tDBOutput_4.setInt(1, XmlOutput.id);

									if (XmlOutput.officeName == null) {
										pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(2, XmlOutput.officeName);
									}

									if (XmlOutput.address == null) {
										pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(3, XmlOutput.address);
									}

									if (XmlOutput.locality == null) {
										pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(4, XmlOutput.locality);
									}

									if (XmlOutput.postalCode == null) {
										pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_4.setInt(5, XmlOutput.postalCode);
									}

									if (XmlOutput.origin == null) {
										pstmtInsert_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_4.setString(6, XmlOutput.origin);
									}

									try {
										int processedCount_tDBOutput_4 = pstmtInsert_tDBOutput_4.executeUpdate();
										insertedCount_tDBOutput_4 += processedCount_tDBOutput_4;
										rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
										nb_line_tDBOutput_4++;
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_4 = true;
										nb_line_tDBOutput_4++;
										System.err.print(e.getMessage());
									}
								} else {
									nb_line_tDBOutput_4++;

								}

								tos_count_tDBOutput_4++;

								/**
								 * [tDBOutput_4 main ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tDBOutput_4";

								/**
								 * [tDBOutput_4 process_data_end ] stop
								 */

							} // End of branch "XmlOutput"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

						} // End of branch "XmlInput"

						/**
						 * [tFileInputXML_1 process_data_end ] start
						 */

						currentComponent = "tFileInputXML_1";

						/**
						 * [tFileInputXML_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputXML_1 end ] start
						 */

						currentComponent = "tFileInputXML_1";

					}
				}
				globalMap.put("tFileInputXML_1_NB_LINE", nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "XmlInput");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				if (pstmtUpdate_tDBOutput_4 != null) {
					pstmtUpdate_tDBOutput_4.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_4");
				}
				if (pstmtInsert_tDBOutput_4 != null) {
					pstmtInsert_tDBOutput_4.close();
					resourceMap.remove("pstmtInsert_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				int rejectedCount_tDBOutput_4 = 0;
				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "XmlOutput");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_1 finally ] start
				 */

				currentComponent = "tFileInputXML_1";

				/**
				 * [tFileInputXML_1 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
					if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_4")) != null) {
						pstmtUpdateToClose_tDBOutput_4.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
					if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_4")) != null) {
						pstmtInsertToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public static class csvOutputStruct implements routines.system.IPersistableRow<csvOutputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String officeName;

		public String getOfficeName() {
			return this.officeName;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public Integer postalCode;

		public Integer getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final csvOutputStruct other = (csvOutputStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(csvOutputStruct other) {

			other.id = this.id;
			other.officeName = this.officeName;
			other.address = this.address;
			other.locality = this.locality;
			other.postalCode = this.postalCode;
			other.origin = this.origin;

		}

		public void copyKeysDataTo(csvOutputStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",officeName=" + officeName);
			sb.append(",address=" + address);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + String.valueOf(postalCode));
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(csvOutputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class csvInputStruct implements routines.system.IPersistableRow<csvInputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public String officeName;

		public String getOfficeName() {
			return this.officeName;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public Integer postalCode;

		public Integer getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("officeName=" + officeName);
			sb.append(",address=" + address);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + String.valueOf(postalCode));
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(csvInputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				csvInputStruct csvInput = new csvInputStruct();
				csvOutputStruct csvOutput = new csvOutputStruct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "csvOutput");
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rowsToCommitCount_tDBOutput_5 = 0;

				String tableName_tDBOutput_5 = "OFFICES";
				boolean whetherReject_tDBOutput_5 = false;

				int updateKeyCount_tDBOutput_5 = 1;
				if (updateKeyCount_tDBOutput_5 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_5 == 6 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_5 = null;
				conn_tDBOutput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
				boolean whetherExist_tDBOutput_5 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_5.next()) {
						String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
						if (table_tDBOutput_5.equalsIgnoreCase("OFFICES")) {
							whetherExist_tDBOutput_5 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_5) {
					try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
						stmtCreate_tDBOutput_5.execute("CREATE TABLE \"" + tableName_tDBOutput_5
								+ "\"(\"id\" INT  not null ,\"officeName\" VARCHAR(20)  ,\"address\" VARCHAR(50)  ,\"locality\" VARCHAR(15)  ,\"postalCode\" INT ,\"origin\" VARCHAR(0)  ,primary key(\"id\"))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement("SELECT COUNT(1) FROM \"" + "OFFICES" + "\" WHERE \"id\" = ?");
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
				String insert_tDBOutput_5 = "INSERT INTO \"" + "OFFICES"
						+ "\" (\"id\",\"officeName\",\"address\",\"locality\",\"postalCode\",\"origin\") VALUES (?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
				String update_tDBOutput_5 = "UPDATE \"" + "OFFICES"
						+ "\" SET \"officeName\" = ?,\"address\" = ?,\"locality\" = ?,\"postalCode\" = ?,\"origin\" = ? WHERE \"id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(update_tDBOutput_5);
				resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "csvInput");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
					Integer id;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				csvOutputStruct csvOutput_tmp = new csvOutputStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"C:/Programmation/TalendTool/data/in/apiCall/offices.csv"/**
																					 * End field
																					 * tFileInputDelimited_1:FILENAME
																					 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_1),
									fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_1),
										fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						csvInput = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						csvInput = new csvInputStruct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								csvInput.officeName = null;

								csvInput.address = null;

								csvInput.locality = null;

								csvInput.postalCode = null;

								csvInput.origin = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									csvInput.officeName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									csvInput.officeName = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									csvInput.address = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									csvInput.address = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									csvInput.locality = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									csvInput.locality = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											csvInput.postalCode = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
													ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"postalCode", "csvInput",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										csvInput.postalCode = null;

									}

								} else {

									csvInput.postalCode = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									csvInput.origin = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									csvInput.origin = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							csvInput = null;

							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "csvInput"
						if (csvInput != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "csvInput"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;
								Var.id = Numeric.sequence("s1", 1, 1);// ###############################
								// ###############################
								// # Output tables

								csvOutput = null;

// # Output table : 'csvOutput'
								csvOutput_tmp.id = Var.id;
								csvOutput_tmp.officeName = csvInput.officeName;
								csvOutput_tmp.address = csvInput.address;
								csvOutput_tmp.locality = csvInput.locality;
								csvOutput_tmp.postalCode = csvInput.postalCode;
								csvOutput_tmp.origin = csvInput.origin;
								csvOutput = csvOutput_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */

							/**
							 * [tMap_5 process_data_begin ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_begin ] stop
							 */
// Start of branch "csvOutput"
							if (csvOutput != null) {

								/**
								 * [tDBOutput_5 main ] start
								 */

								currentComponent = "tDBOutput_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "csvOutput"

									);
								}

								whetherReject_tDBOutput_5 = false;

								pstmt_tDBOutput_5.setInt(1, csvOutput.id);

								int checkCount_tDBOutput_5 = -1;
								try (java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5.executeQuery()) {
									while (rs_tDBOutput_5.next()) {
										checkCount_tDBOutput_5 = rs_tDBOutput_5.getInt(1);
									}
								}
								if (checkCount_tDBOutput_5 > 0) {
									if (csvOutput.officeName == null) {
										pstmtUpdate_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_5.setString(1, csvOutput.officeName);
									}

									if (csvOutput.address == null) {
										pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_5.setString(2, csvOutput.address);
									}

									if (csvOutput.locality == null) {
										pstmtUpdate_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_5.setString(3, csvOutput.locality);
									}

									if (csvOutput.postalCode == null) {
										pstmtUpdate_tDBOutput_5.setNull(4, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_5.setInt(4, csvOutput.postalCode);
									}

									if (csvOutput.origin == null) {
										pstmtUpdate_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_5.setString(5, csvOutput.origin);
									}

									pstmtUpdate_tDBOutput_5.setInt(6, csvOutput.id);

									try {
										int processedCount_tDBOutput_5 = pstmtUpdate_tDBOutput_5.executeUpdate();
										updatedCount_tDBOutput_5 += processedCount_tDBOutput_5;
										rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
										nb_line_tDBOutput_5++;
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_5_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_5 = true;
										nb_line_tDBOutput_5++;
										System.err.print(e.getMessage());
									}
								} else {
									pstmtInsert_tDBOutput_5.setInt(1, csvOutput.id);

									if (csvOutput.officeName == null) {
										pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_5.setString(2, csvOutput.officeName);
									}

									if (csvOutput.address == null) {
										pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_5.setString(3, csvOutput.address);
									}

									if (csvOutput.locality == null) {
										pstmtInsert_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_5.setString(4, csvOutput.locality);
									}

									if (csvOutput.postalCode == null) {
										pstmtInsert_tDBOutput_5.setNull(5, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_5.setInt(5, csvOutput.postalCode);
									}

									if (csvOutput.origin == null) {
										pstmtInsert_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_5.setString(6, csvOutput.origin);
									}

									try {
										int processedCount_tDBOutput_5 = pstmtInsert_tDBOutput_5.executeUpdate();
										insertedCount_tDBOutput_5 += processedCount_tDBOutput_5;
										rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
										nb_line_tDBOutput_5++;
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_5_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_5 = true;
										nb_line_tDBOutput_5++;
										System.err.print(e.getMessage());
									}
								}

								tos_count_tDBOutput_5++;

								/**
								 * [tDBOutput_5 main ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_end ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_end ] stop
								 */

							} // End of branch "csvOutput"

							/**
							 * [tMap_5 process_data_end ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_end ] stop
							 */

						} // End of branch "csvInput"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "csvInput");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				if (pstmtUpdate_tDBOutput_5 != null) {
					pstmtUpdate_tDBOutput_5.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_5");
				}
				if (pstmtInsert_tDBOutput_5 != null) {
					pstmtInsert_tDBOutput_5.close();
					resourceMap.remove("pstmtInsert_tDBOutput_5");
				}
				if (pstmt_tDBOutput_5 != null) {
					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				int rejectedCount_tDBOutput_5 = 0;
				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "csvOutput");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
					if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_5")) != null) {
						pstmtUpdateToClose_tDBOutput_5.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
					if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_5")) != null) {
						pstmtInsertToClose_tDBOutput_5.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
					if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_5")) != null) {
						pstmtToClose_tDBOutput_5.close();
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class finlaCommitStruct implements routines.system.IPersistableRow<finlaCommitStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String officeName;

		public String getOfficeName() {
			return this.officeName;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public Integer postalCode;

		public Integer getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final finlaCommitStruct other = (finlaCommitStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(finlaCommitStruct other) {

			other.id = this.id;
			other.officeName = this.officeName;
			other.address = this.address;
			other.locality = this.locality;
			other.postalCode = this.postalCode;
			other.origin = this.origin;

		}

		public void copyKeysDataTo(finlaCommitStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",officeName=" + officeName);
			sb.append(",address=" + address);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + String.valueOf(postalCode));
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(finlaCommitStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class xlsxOutputStruct implements routines.system.IPersistableRow<xlsxOutputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String officeName;

		public String getOfficeName() {
			return this.officeName;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public Integer postalCode;

		public Integer getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final xlsxOutputStruct other = (xlsxOutputStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(xlsxOutputStruct other) {

			other.id = this.id;
			other.officeName = this.officeName;
			other.address = this.address;
			other.locality = this.locality;
			other.postalCode = this.postalCode;
			other.origin = this.origin;

		}

		public void copyKeysDataTo(xlsxOutputStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",officeName=" + officeName);
			sb.append(",address=" + address);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + String.valueOf(postalCode));
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(xlsxOutputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class xlsxInputStruct implements routines.system.IPersistableRow<xlsxInputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public String officeName;

		public String getOfficeName() {
			return this.officeName;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public Integer postalCode;

		public Integer getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.officeName = readString(dis);

					this.address = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readInteger(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.officeName, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.locality, dos);

				// Integer

				writeInteger(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("officeName=" + officeName);
			sb.append(",address=" + address);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + String.valueOf(postalCode));
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(xlsxInputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				xlsxInputStruct xlsxInput = new xlsxInputStruct();
				xlsxOutputStruct xlsxOutput = new xlsxOutputStruct();
				finlaCommitStruct finlaCommit = new finlaCommitStruct();

				/**
				 * [tDBCommit_3 begin ] start
				 */

				ok_Hash.put("tDBCommit_3", false);
				start_Hash.put("tDBCommit_3", System.currentTimeMillis());

				currentComponent = "tDBCommit_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "finlaCommit");
				}

				int tos_count_tDBCommit_3 = 0;

				/**
				 * [tDBCommit_3 begin ] stop
				 */

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "xlsxOutput");
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rowsToCommitCount_tDBOutput_6 = 0;

				String tableName_tDBOutput_6 = "OFFICES";
				boolean whetherReject_tDBOutput_6 = false;

				int updateKeyCount_tDBOutput_6 = 1;
				if (updateKeyCount_tDBOutput_6 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_6 == 6 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_6 = null;
				conn_tDBOutput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
				boolean whetherExist_tDBOutput_6 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_6.next()) {
						String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
						if (table_tDBOutput_6.equalsIgnoreCase("OFFICES")) {
							whetherExist_tDBOutput_6 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_6) {
					try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
						stmtCreate_tDBOutput_6.execute("CREATE TABLE \"" + tableName_tDBOutput_6
								+ "\"(\"id\" INT  not null ,\"officeName\" VARCHAR(20)  ,\"address\" VARCHAR(50)  ,\"locality\" VARCHAR(15)  ,\"postalCode\" INT ,\"origin\" VARCHAR(0)  ,primary key(\"id\"))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement("SELECT COUNT(1) FROM \"" + "OFFICES" + "\" WHERE \"id\" = ?");
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
				String insert_tDBOutput_6 = "INSERT INTO \"" + "OFFICES"
						+ "\" (\"id\",\"officeName\",\"address\",\"locality\",\"postalCode\",\"origin\") VALUES (?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmtInsert_tDBOutput_6", pstmtInsert_tDBOutput_6);
				String update_tDBOutput_6 = "UPDATE \"" + "OFFICES"
						+ "\" SET \"officeName\" = ?,\"address\" = ?,\"locality\" = ?,\"postalCode\" = ?,\"origin\" = ? WHERE \"id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(update_tDBOutput_6);
				resourceMap.put("pstmtUpdate_tDBOutput_6", pstmtUpdate_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "xlsxInput");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
					Integer id;
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				xlsxOutputStruct xlsxOutput_tmp = new xlsxOutputStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:IWbaDexgdyRP/ZDrKOOKwuXzVnjefrwyVecTZQ==");
				String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
				if (password_tFileInputExcel_1.isEmpty()) {
					password_tFileInputExcel_1 = null;
				}
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "C:/Programmation/TalendTool/data/in/apiCall/offices.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_1), password_tFileInputExcel_1,
									true);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_1, password_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							xlsxInput = null;
							int tempRowLength_tFileInputExcel_1 = 5;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1
										? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i + start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							xlsxInput = new xlsxInputStruct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "officeName";

									xlsxInput.officeName = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									xlsxInput.officeName = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "address";

									xlsxInput.address = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									xlsxInput.address = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "locality";

									xlsxInput.locality = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									xlsxInput.locality = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "postalCode";

									xlsxInput.postalCode = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									xlsxInput.postalCode = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "origin";

									xlsxInput.origin = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									xlsxInput.origin = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_1_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								xlsxInput = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "xlsxInput"
							if (xlsxInput != null) {

								/**
								 * [tMap_6 main ] start
								 */

								currentComponent = "tMap_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "xlsxInput"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_6 = false;
								boolean mainRowRejected_tMap_6 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_6__Struct Var = Var__tMap_6;
									Var.id = Numeric.sequence("s1", 1, 1);// ###############################
									// ###############################
									// # Output tables

									xlsxOutput = null;

// # Output table : 'xlsxOutput'
									xlsxOutput_tmp.id = Var.id;
									xlsxOutput_tmp.officeName = xlsxInput.officeName;
									xlsxOutput_tmp.address = xlsxInput.address;
									xlsxOutput_tmp.locality = xlsxInput.locality;
									xlsxOutput_tmp.postalCode = xlsxInput.postalCode;
									xlsxOutput_tmp.origin = xlsxInput.origin;
									xlsxOutput = xlsxOutput_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_6 = false;

								tos_count_tMap_6++;

								/**
								 * [tMap_6 main ] stop
								 */

								/**
								 * [tMap_6 process_data_begin ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_begin ] stop
								 */
// Start of branch "xlsxOutput"
								if (xlsxOutput != null) {

									/**
									 * [tDBOutput_6 main ] start
									 */

									currentComponent = "tDBOutput_6";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "xlsxOutput"

										);
									}

									finlaCommit = null;
									whetherReject_tDBOutput_6 = false;

									pstmt_tDBOutput_6.setInt(1, xlsxOutput.id);

									int checkCount_tDBOutput_6 = -1;
									try (java.sql.ResultSet rs_tDBOutput_6 = pstmt_tDBOutput_6.executeQuery()) {
										while (rs_tDBOutput_6.next()) {
											checkCount_tDBOutput_6 = rs_tDBOutput_6.getInt(1);
										}
									}
									if (checkCount_tDBOutput_6 > 0) {
										if (xlsxOutput.officeName == null) {
											pstmtUpdate_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(1, xlsxOutput.officeName);
										}

										if (xlsxOutput.address == null) {
											pstmtUpdate_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(2, xlsxOutput.address);
										}

										if (xlsxOutput.locality == null) {
											pstmtUpdate_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(3, xlsxOutput.locality);
										}

										if (xlsxOutput.postalCode == null) {
											pstmtUpdate_tDBOutput_6.setNull(4, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(4, xlsxOutput.postalCode);
										}

										if (xlsxOutput.origin == null) {
											pstmtUpdate_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(5, xlsxOutput.origin);
										}

										pstmtUpdate_tDBOutput_6.setInt(6, xlsxOutput.id);

										try {
											int processedCount_tDBOutput_6 = pstmtUpdate_tDBOutput_6.executeUpdate();
											updatedCount_tDBOutput_6 += processedCount_tDBOutput_6;
											rowsToCommitCount_tDBOutput_6 += processedCount_tDBOutput_6;
											nb_line_tDBOutput_6++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_6_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_6 = true;
											nb_line_tDBOutput_6++;
											System.err.print(e.getMessage());
										}
									} else {
										pstmtInsert_tDBOutput_6.setInt(1, xlsxOutput.id);

										if (xlsxOutput.officeName == null) {
											pstmtInsert_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(2, xlsxOutput.officeName);
										}

										if (xlsxOutput.address == null) {
											pstmtInsert_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(3, xlsxOutput.address);
										}

										if (xlsxOutput.locality == null) {
											pstmtInsert_tDBOutput_6.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(4, xlsxOutput.locality);
										}

										if (xlsxOutput.postalCode == null) {
											pstmtInsert_tDBOutput_6.setNull(5, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(5, xlsxOutput.postalCode);
										}

										if (xlsxOutput.origin == null) {
											pstmtInsert_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(6, xlsxOutput.origin);
										}

										try {
											int processedCount_tDBOutput_6 = pstmtInsert_tDBOutput_6.executeUpdate();
											insertedCount_tDBOutput_6 += processedCount_tDBOutput_6;
											rowsToCommitCount_tDBOutput_6 += processedCount_tDBOutput_6;
											nb_line_tDBOutput_6++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_6_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_6 = true;
											nb_line_tDBOutput_6++;
											System.err.print(e.getMessage());
										}
									}
									if (!whetherReject_tDBOutput_6) {
										finlaCommit = new finlaCommitStruct();
										finlaCommit.id = xlsxOutput.id;
										finlaCommit.officeName = xlsxOutput.officeName;
										finlaCommit.address = xlsxOutput.address;
										finlaCommit.locality = xlsxOutput.locality;
										finlaCommit.postalCode = xlsxOutput.postalCode;
										finlaCommit.origin = xlsxOutput.origin;
									}

									tos_count_tDBOutput_6++;

									/**
									 * [tDBOutput_6 main ] stop
									 */

									/**
									 * [tDBOutput_6 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_6";

									/**
									 * [tDBOutput_6 process_data_begin ] stop
									 */
// Start of branch "finlaCommit"
									if (finlaCommit != null) {

										/**
										 * [tDBCommit_3 main ] start
										 */

										currentComponent = "tDBCommit_3";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "finlaCommit"

											);
										}

										java.sql.Connection conn_tDBCommit_3 = (java.sql.Connection) globalMap
												.get("conn_tDBConnection_1");
										if (conn_tDBCommit_3 != null && !conn_tDBCommit_3.isClosed()) {

											conn_tDBCommit_3.commit();

										}

										tos_count_tDBCommit_3++;

										/**
										 * [tDBCommit_3 main ] stop
										 */

										/**
										 * [tDBCommit_3 process_data_begin ] start
										 */

										currentComponent = "tDBCommit_3";

										/**
										 * [tDBCommit_3 process_data_begin ] stop
										 */

										/**
										 * [tDBCommit_3 process_data_end ] start
										 */

										currentComponent = "tDBCommit_3";

										/**
										 * [tDBCommit_3 process_data_end ] stop
										 */

									} // End of branch "finlaCommit"

									/**
									 * [tDBOutput_6 process_data_end ] start
									 */

									currentComponent = "tDBOutput_6";

									/**
									 * [tDBOutput_6 process_data_end ] stop
									 */

								} // End of branch "xlsxOutput"

								/**
								 * [tMap_6 process_data_end ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_end ] stop
								 */

							} // End of branch "xlsxInput"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "xlsxInput");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				if (pstmtUpdate_tDBOutput_6 != null) {
					pstmtUpdate_tDBOutput_6.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_6");
				}
				if (pstmtInsert_tDBOutput_6 != null) {
					pstmtInsert_tDBOutput_6.close();
					resourceMap.remove("pstmtInsert_tDBOutput_6");
				}
				if (pstmt_tDBOutput_6 != null) {
					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				int rejectedCount_tDBOutput_6 = 0;
				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "xlsxOutput");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

				/**
				 * [tDBCommit_3 end ] start
				 */

				currentComponent = "tDBCommit_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "finlaCommit");
				}

				ok_Hash.put("tDBCommit_3", true);
				end_Hash.put("tDBCommit_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tWarn_7Process(globalMap);

				/**
				 * [tDBCommit_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_6 = null;
					if ((pstmtUpdateToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_6")) != null) {
						pstmtUpdateToClose_tDBOutput_6.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_6 = null;
					if ((pstmtInsertToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_6")) != null) {
						pstmtInsertToClose_tDBOutput_6.close();
					}
					java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
					if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_6")) != null) {
						pstmtToClose_tDBOutput_6.close();
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

				/**
				 * [tDBCommit_3 finally ] start
				 */

				currentComponent = "tDBCommit_3";

				/**
				 * [tDBCommit_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_7 begin ] start
				 */

				ok_Hash.put("tWarn_7", false);
				start_Hash.put("tWarn_7", System.currentTimeMillis());

				currentComponent = "tWarn_7";

				int tos_count_tWarn_7 = 0;

				/**
				 * [tWarn_7 begin ] stop
				 */

				/**
				 * [tWarn_7 main ] start
				 */

				currentComponent = "tWarn_7";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_7", "", Thread.currentThread().getId() + "", "WARN",
							"",
							"The final transactions in OFFICES table with several file types are commited into database",
							"", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_7", 4,
							"The final transactions in OFFICES table with several file types are commited into database",
							200);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_7_WARN_MESSAGES",
							"The final transactions in OFFICES table with several file types are commited into database");
					globalMap.put("tWarn_7_WARN_PRIORITY", 4);
					globalMap.put("tWarn_7_WARN_CODE", 200);

				} catch (Exception e_tWarn_7) {
					globalMap.put("tWarn_7_ERROR_MESSAGE", e_tWarn_7.getMessage());
					logIgnoredError(
							String.format("tWarn_7 - tWarn failed to log message due to internal error: %s", e_tWarn_7),
							e_tWarn_7);
				}

				tos_count_tWarn_7++;

				/**
				 * [tWarn_7 main ] stop
				 */

				/**
				 * [tWarn_7 process_data_begin ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 process_data_begin ] stop
				 */

				/**
				 * [tWarn_7 process_data_end ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 process_data_end ] stop
				 */

				/**
				 * [tWarn_7 end ] start
				 */

				currentComponent = "tWarn_7";

				ok_Hash.put("tWarn_7", true);
				end_Hash.put("tWarn_7", System.currentTimeMillis());

				/**
				 * [tWarn_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_7 finally ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_7_SUBPROCESS_STATE", 1);
	}

	public void tDBRollback_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRollback_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRollback_3 begin ] start
				 */

				ok_Hash.put("tDBRollback_3", false);
				start_Hash.put("tDBRollback_3", System.currentTimeMillis());

				currentComponent = "tDBRollback_3";

				int tos_count_tDBRollback_3 = 0;

				/**
				 * [tDBRollback_3 begin ] stop
				 */

				/**
				 * [tDBRollback_3 main ] start
				 */

				currentComponent = "tDBRollback_3";

				java.sql.Connection conn_tDBRollback_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBRollback_3 != null && !conn_tDBRollback_3.isClosed()) {

					conn_tDBRollback_3.rollback();

				}

				tos_count_tDBRollback_3++;

				/**
				 * [tDBRollback_3 main ] stop
				 */

				/**
				 * [tDBRollback_3 process_data_begin ] start
				 */

				currentComponent = "tDBRollback_3";

				/**
				 * [tDBRollback_3 process_data_begin ] stop
				 */

				/**
				 * [tDBRollback_3 process_data_end ] start
				 */

				currentComponent = "tDBRollback_3";

				/**
				 * [tDBRollback_3 process_data_end ] stop
				 */

				/**
				 * [tDBRollback_3 end ] start
				 */

				currentComponent = "tDBRollback_3";

				ok_Hash.put("tDBRollback_3", true);
				end_Hash.put("tDBRollback_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tWarn_8Process(globalMap);

				/**
				 * [tDBRollback_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRollback_3 finally ] start
				 */

				currentComponent = "tDBRollback_3";

				/**
				 * [tDBRollback_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRollback_3_SUBPROCESS_STATE", 1);
	}

	public void tWarn_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_8 begin ] start
				 */

				ok_Hash.put("tWarn_8", false);
				start_Hash.put("tWarn_8", System.currentTimeMillis());

				currentComponent = "tWarn_8";

				int tos_count_tWarn_8 = 0;

				/**
				 * [tWarn_8 begin ] stop
				 */

				/**
				 * [tWarn_8 main ] start
				 */

				currentComponent = "tWarn_8";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_8", "", Thread.currentThread().getId() + "", "WARN",
							"", "The final commit was rolled back", "", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_8", 4, "The final commit was rolled back", 42);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_8_WARN_MESSAGES", "The final commit was rolled back");
					globalMap.put("tWarn_8_WARN_PRIORITY", 4);
					globalMap.put("tWarn_8_WARN_CODE", 42);

				} catch (Exception e_tWarn_8) {
					globalMap.put("tWarn_8_ERROR_MESSAGE", e_tWarn_8.getMessage());
					logIgnoredError(
							String.format("tWarn_8 - tWarn failed to log message due to internal error: %s", e_tWarn_8),
							e_tWarn_8);
				}

				tos_count_tWarn_8++;

				/**
				 * [tWarn_8 main ] stop
				 */

				/**
				 * [tWarn_8 process_data_begin ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 process_data_begin ] stop
				 */

				/**
				 * [tWarn_8 process_data_end ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 process_data_end ] stop
				 */

				/**
				 * [tWarn_8 end ] start
				 */

				currentComponent = "tWarn_8";

				ok_Hash.put("tWarn_8", true);
				end_Hash.put("tWarn_8", System.currentTimeMillis());

				/**
				 * [tWarn_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_8 finally ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_8_SUBPROCESS_STATE", 1);
	}

	public void tWarn_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_6 begin ] start
				 */

				ok_Hash.put("tWarn_6", false);
				start_Hash.put("tWarn_6", System.currentTimeMillis());

				currentComponent = "tWarn_6";

				int tos_count_tWarn_6 = 0;

				/**
				 * [tWarn_6 begin ] stop
				 */

				/**
				 * [tWarn_6 main ] start
				 */

				currentComponent = "tWarn_6";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_6", "", Thread.currentThread().getId() + "", "WARN",
							"", "Something wrong went on the final commit", "", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_6", 4, "Something wrong went on the final commit", 42);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_6_WARN_MESSAGES", "Something wrong went on the final commit");
					globalMap.put("tWarn_6_WARN_PRIORITY", 4);
					globalMap.put("tWarn_6_WARN_CODE", 42);

				} catch (Exception e_tWarn_6) {
					globalMap.put("tWarn_6_ERROR_MESSAGE", e_tWarn_6.getMessage());
					logIgnoredError(
							String.format("tWarn_6 - tWarn failed to log message due to internal error: %s", e_tWarn_6),
							e_tWarn_6);
				}

				tos_count_tWarn_6++;

				/**
				 * [tWarn_6 main ] stop
				 */

				/**
				 * [tWarn_6 process_data_begin ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 process_data_begin ] stop
				 */

				/**
				 * [tWarn_6 process_data_end ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 process_data_end ] stop
				 */

				/**
				 * [tWarn_6 end ] start
				 */

				currentComponent = "tWarn_6";

				ok_Hash.put("tWarn_6", true);
				end_Hash.put("tWarn_6", System.currentTimeMillis());

				/**
				 * [tWarn_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_6 finally ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_6_SUBPROCESS_STATE", 1);
	}

	public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_5 begin ] start
				 */

				ok_Hash.put("tWarn_5", false);
				start_Hash.put("tWarn_5", System.currentTimeMillis());

				currentComponent = "tWarn_5";

				int tos_count_tWarn_5 = 0;

				/**
				 * [tWarn_5 begin ] stop
				 */

				/**
				 * [tWarn_5 main ] start
				 */

				currentComponent = "tWarn_5";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "WARN",
							"", "The transaction in OFFICES table with API datas is commited into database", "", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_5", 4,
							"The transaction in OFFICES table with API datas is commited into database", 200);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_5_WARN_MESSAGES",
							"The transaction in OFFICES table with API datas is commited into database");
					globalMap.put("tWarn_5_WARN_PRIORITY", 4);
					globalMap.put("tWarn_5_WARN_CODE", 200);

				} catch (Exception e_tWarn_5) {
					globalMap.put("tWarn_5_ERROR_MESSAGE", e_tWarn_5.getMessage());
					logIgnoredError(
							String.format("tWarn_5 - tWarn failed to log message due to internal error: %s", e_tWarn_5),
							e_tWarn_5);
				}

				tos_count_tWarn_5++;

				/**
				 * [tWarn_5 main ] stop
				 */

				/**
				 * [tWarn_5 process_data_begin ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 process_data_begin ] stop
				 */

				/**
				 * [tWarn_5 process_data_end ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 process_data_end ] stop
				 */

				/**
				 * [tWarn_5 end ] start
				 */

				currentComponent = "tWarn_5";

				ok_Hash.put("tWarn_5", true);
				end_Hash.put("tWarn_5", System.currentTimeMillis());

				/**
				 * [tWarn_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_5 finally ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:sqlite:" + "/"
						+ "C:/Programmation/TalendTool/data/sqlite/ei-techno.sqlite";
				String dbUser_tDBConnection_1 = null;

				String dbPwd_tDBConnection_1 = null;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "org.sqlite.JDBC";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tWarn_1Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "WARN",
							"", "The sqlite connection is successfull", "", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_1", 4, "The sqlite connection is successfull", 200);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_1_WARN_MESSAGES", "The sqlite connection is successfull");
					globalMap.put("tWarn_1_WARN_PRIORITY", 4);
					globalMap.put("tWarn_1_WARN_CODE", 200);

				} catch (Exception e_tWarn_1) {
					globalMap.put("tWarn_1_ERROR_MESSAGE", e_tWarn_1.getMessage());
					logIgnoredError(
							String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1),
							e_tWarn_1);
				}

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 process_data_begin ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 process_data_begin ] stop
				 */

				/**
				 * [tWarn_1 process_data_end ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 process_data_end ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_2 begin ] start
				 */

				ok_Hash.put("tWarn_2", false);
				start_Hash.put("tWarn_2", System.currentTimeMillis());

				currentComponent = "tWarn_2";

				int tos_count_tWarn_2 = 0;

				/**
				 * [tWarn_2 begin ] stop
				 */

				/**
				 * [tWarn_2 main ] start
				 */

				currentComponent = "tWarn_2";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "WARN",
							"", "sqlite Connection error", "", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_2", 4, "sqlite Connection error", 43);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_2_WARN_MESSAGES", "sqlite Connection error");
					globalMap.put("tWarn_2_WARN_PRIORITY", 4);
					globalMap.put("tWarn_2_WARN_CODE", 43);

				} catch (Exception e_tWarn_2) {
					globalMap.put("tWarn_2_ERROR_MESSAGE", e_tWarn_2.getMessage());
					logIgnoredError(
							String.format("tWarn_2 - tWarn failed to log message due to internal error: %s", e_tWarn_2),
							e_tWarn_2);
				}

				tos_count_tWarn_2++;

				/**
				 * [tWarn_2 main ] stop
				 */

				/**
				 * [tWarn_2 process_data_begin ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 process_data_begin ] stop
				 */

				/**
				 * [tWarn_2 process_data_end ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 process_data_end ] stop
				 */

				/**
				 * [tWarn_2 end ] start
				 */

				currentComponent = "tWarn_2";

				ok_Hash.put("tWarn_2", true);
				end_Hash.put("tWarn_2", System.currentTimeMillis());

				/**
				 * [tWarn_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_2 finally ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}

	public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRollback_1 begin ] start
				 */

				ok_Hash.put("tDBRollback_1", false);
				start_Hash.put("tDBRollback_1", System.currentTimeMillis());

				currentComponent = "tDBRollback_1";

				int tos_count_tDBRollback_1 = 0;

				/**
				 * [tDBRollback_1 begin ] stop
				 */

				/**
				 * [tDBRollback_1 main ] start
				 */

				currentComponent = "tDBRollback_1";

				java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {

					conn_tDBRollback_1.rollback();

				}

				tos_count_tDBRollback_1++;

				/**
				 * [tDBRollback_1 main ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_begin ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_end ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_end ] stop
				 */

				/**
				 * [tDBRollback_1 end ] start
				 */

				currentComponent = "tDBRollback_1";

				ok_Hash.put("tDBRollback_1", true);
				end_Hash.put("tDBRollback_1", System.currentTimeMillis());

				/**
				 * [tDBRollback_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRollback_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tWarn_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRollback_1 finally ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_3 begin ] start
				 */

				ok_Hash.put("tWarn_3", false);
				start_Hash.put("tWarn_3", System.currentTimeMillis());

				currentComponent = "tWarn_3";

				int tos_count_tWarn_3 = 0;

				/**
				 * [tWarn_3 begin ] stop
				 */

				/**
				 * [tWarn_3 main ] start
				 */

				currentComponent = "tWarn_3";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "WARN",
							"",
							"The transaction to GENERAL table was rolled back - there is a probleme with the API datas insertion",
							"", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_3", 4,
							"The transaction to GENERAL table was rolled back - there is a probleme with the API datas insertion",
							42);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_3_WARN_MESSAGES",
							"The transaction to GENERAL table was rolled back - there is a probleme with the API datas insertion");
					globalMap.put("tWarn_3_WARN_PRIORITY", 4);
					globalMap.put("tWarn_3_WARN_CODE", 42);

				} catch (Exception e_tWarn_3) {
					globalMap.put("tWarn_3_ERROR_MESSAGE", e_tWarn_3.getMessage());
					logIgnoredError(
							String.format("tWarn_3 - tWarn failed to log message due to internal error: %s", e_tWarn_3),
							e_tWarn_3);
				}

				tos_count_tWarn_3++;

				/**
				 * [tWarn_3 main ] stop
				 */

				/**
				 * [tWarn_3 process_data_begin ] start
				 */

				currentComponent = "tWarn_3";

				/**
				 * [tWarn_3 process_data_begin ] stop
				 */

				/**
				 * [tWarn_3 process_data_end ] start
				 */

				currentComponent = "tWarn_3";

				/**
				 * [tWarn_3 process_data_end ] stop
				 */

				/**
				 * [tWarn_3 end ] start
				 */

				currentComponent = "tWarn_3";

				ok_Hash.put("tWarn_3", true);
				end_Hash.put("tWarn_3", System.currentTimeMillis());

				/**
				 * [tWarn_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_3 finally ] start
				 */

				currentComponent = "tWarn_3";

				/**
				 * [tWarn_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}

	public void tDBRollback_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRollback_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRollback_2 begin ] start
				 */

				ok_Hash.put("tDBRollback_2", false);
				start_Hash.put("tDBRollback_2", System.currentTimeMillis());

				currentComponent = "tDBRollback_2";

				int tos_count_tDBRollback_2 = 0;

				/**
				 * [tDBRollback_2 begin ] stop
				 */

				/**
				 * [tDBRollback_2 main ] start
				 */

				currentComponent = "tDBRollback_2";

				java.sql.Connection conn_tDBRollback_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBRollback_2 != null && !conn_tDBRollback_2.isClosed()) {

					conn_tDBRollback_2.rollback();

				}

				tos_count_tDBRollback_2++;

				/**
				 * [tDBRollback_2 main ] stop
				 */

				/**
				 * [tDBRollback_2 process_data_begin ] start
				 */

				currentComponent = "tDBRollback_2";

				/**
				 * [tDBRollback_2 process_data_begin ] stop
				 */

				/**
				 * [tDBRollback_2 process_data_end ] start
				 */

				currentComponent = "tDBRollback_2";

				/**
				 * [tDBRollback_2 process_data_end ] stop
				 */

				/**
				 * [tDBRollback_2 end ] start
				 */

				currentComponent = "tDBRollback_2";

				ok_Hash.put("tDBRollback_2", true);
				end_Hash.put("tDBRollback_2", System.currentTimeMillis());

				/**
				 * [tDBRollback_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRollback_2 finally ] start
				 */

				currentComponent = "tDBRollback_2";

				/**
				 * [tDBRollback_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRollback_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGFILEPATH + context.LOGFILENAME))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("moment");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("pid");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("root_pid");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("father_pid");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("project");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("job");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("context");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("priority");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("type");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("origin");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("message");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("code");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
						row2.type = lcm.getType();
						row2.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row2.priority = lcm.getPriority();
						row2.message = lcm.getMessage();
						row2.code = lcm.getCode();

						row2.moment = java.util.Calendar.getInstance().getTime();

						row2.pid = pid;
						row2.root_pid = rootPid;
						row2.father_pid = fatherPid;

						row2.project = projectName;
						row2.job = jobName;
						row2.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row2.moment != null) {
							sb_tFileOutputDelimited_1
									.append(FormatterUtils.format_Date(row2.moment, "yyyy-MM-dd HH:mm:ss"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.pid != null) {
							sb_tFileOutputDelimited_1.append(row2.pid);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.root_pid != null) {
							sb_tFileOutputDelimited_1.append(row2.root_pid);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.father_pid != null) {
							sb_tFileOutputDelimited_1.append(row2.father_pid);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.project != null) {
							sb_tFileOutputDelimited_1.append(row2.project);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.job != null) {
							sb_tFileOutputDelimited_1.append(row2.job);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.context != null) {
							sb_tFileOutputDelimited_1.append(row2.context);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.priority != null) {
							sb_tFileOutputDelimited_1.append(row2.priority);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.type != null) {
							sb_tFileOutputDelimited_1.append(row2.type);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.origin != null) {
							sb_tFileOutputDelimited_1.append(row2.origin);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.message != null) {
							sb_tFileOutputDelimited_1.append(row2.message);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.code != null) {
							sb_tFileOutputDelimited_1.append(row2.code);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					globalMap.put("tLogCatcher_1_ERROR_MESSAGE", e_tLogCatcher_1.getMessage());
					logIgnoredError(String.format(
							"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public static class headquartersOuputStruct implements routines.system.IPersistableRow<headquartersOuputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name1;

		public String getName1() {
			return this.name1;
		}

		public String addressLine1;

		public String getAddressLine1() {
			return this.addressLine1;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final headquartersOuputStruct other = (headquartersOuputStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(headquartersOuputStruct other) {

			other.id = this.id;
			other.name1 = this.name1;
			other.addressLine1 = this.addressLine1;
			other.locality = this.locality;
			other.postalCode = this.postalCode;
			other.origin = this.origin;

		}

		public void copyKeysDataTo(headquartersOuputStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name1=" + name1);
			sb.append(",addressLine1=" + addressLine1);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + postalCode);
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(headquartersOuputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class dbInputStruct implements routines.system.IPersistableRow<dbInputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer approxEmployees;

		public Integer getApproxEmployees() {
			return this.approxEmployees;
		}

		public Integer founded;

		public Integer getFounded() {
			return this.founded;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String name1;

		public String getName1() {
			return this.name1;
		}

		public String addressLine1;

		public String getAddressLine1() {
			return this.addressLine1;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final dbInputStruct other = (dbInputStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(dbInputStruct other) {

			other.id = this.id;
			other.name = this.name;
			other.approxEmployees = this.approxEmployees;
			other.founded = this.founded;
			other.type = this.type;
			other.name1 = this.name1;
			other.addressLine1 = this.addressLine1;
			other.locality = this.locality;
			other.postalCode = this.postalCode;

		}

		public void copyKeysDataTo(dbInputStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",approxEmployees=" + String.valueOf(approxEmployees));
			sb.append(",founded=" + String.valueOf(founded));
			sb.append(",type=" + type);
			sb.append(",name1=" + name1);
			sb.append(",addressLine1=" + addressLine1);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + postalCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dbInputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class consoleLogClearedOutputStruct
			implements routines.system.IPersistableRow<consoleLogClearedOutputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer approxEmployees;

		public Integer getApproxEmployees() {
			return this.approxEmployees;
		}

		public Integer founded;

		public Integer getFounded() {
			return this.founded;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String name1;

		public String getName1() {
			return this.name1;
		}

		public String addressLine1;

		public String getAddressLine1() {
			return this.addressLine1;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",approxEmployees=" + String.valueOf(approxEmployees));
			sb.append(",founded=" + String.valueOf(founded));
			sb.append(",type=" + type);
			sb.append(",name1=" + name1);
			sb.append(",addressLine1=" + addressLine1);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + postalCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(consoleLogClearedOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class clearedOutputStruct implements routines.system.IPersistableRow<clearedOutputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer approxEmployees;

		public Integer getApproxEmployees() {
			return this.approxEmployees;
		}

		public Integer founded;

		public Integer getFounded() {
			return this.founded;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String name1;

		public String getName1() {
			return this.name1;
		}

		public String addressLine1;

		public String getAddressLine1() {
			return this.addressLine1;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",approxEmployees=" + String.valueOf(approxEmployees));
			sb.append(",founded=" + String.valueOf(founded));
			sb.append(",type=" + type);
			sb.append(",name1=" + name1);
			sb.append(",addressLine1=" + addressLine1);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + postalCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(clearedOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class clearedOutputSecondTableStruct
			implements routines.system.IPersistableRow<clearedOutputSecondTableStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer approxEmployees;

		public Integer getApproxEmployees() {
			return this.approxEmployees;
		}

		public Integer founded;

		public Integer getFounded() {
			return this.founded;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String name1;

		public String getName1() {
			return this.name1;
		}

		public String addressLine1;

		public String getAddressLine1() {
			return this.addressLine1;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",approxEmployees=" + String.valueOf(approxEmployees));
			sb.append(",founded=" + String.valueOf(founded));
			sb.append(",type=" + type);
			sb.append(",name1=" + name1);
			sb.append(",addressLine1=" + addressLine1);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + postalCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(clearedOutputSecondTableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class clearedInputStruct implements routines.system.IPersistableRow<clearedInputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer approxEmployees;

		public Integer getApproxEmployees() {
			return this.approxEmployees;
		}

		public Integer founded;

		public Integer getFounded() {
			return this.founded;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String name1;

		public String getName1() {
			return this.name1;
		}

		public String addressLine1;

		public String getAddressLine1() {
			return this.addressLine1;
		}

		public String locality;

		public String getLocality() {
			return this.locality;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.approxEmployees = readInteger(dis);

					this.founded = readInteger(dis);

					this.type = readString(dis);

					this.name1 = readString(dis);

					this.addressLine1 = readString(dis);

					this.locality = readString(dis);

					this.postalCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.approxEmployees, dos);

				// Integer

				writeInteger(this.founded, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.name1, dos);

				// String

				writeString(this.addressLine1, dos);

				// String

				writeString(this.locality, dos);

				// String

				writeString(this.postalCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",approxEmployees=" + String.valueOf(approxEmployees));
			sb.append(",founded=" + String.valueOf(founded));
			sb.append(",type=" + type);
			sb.append(",name1=" + name1);
			sb.append(",addressLine1=" + addressLine1);
			sb.append(",locality=" + locality);
			sb.append(",postalCode=" + postalCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(clearedInputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class consoleLogNativeOutputStruct
			implements routines.system.IPersistableRow<consoleLogNativeOutputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(consoleLogNativeOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class nativeOutputStruct implements routines.system.IPersistableRow<nativeOutputStruct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nativeOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TRAININGPROJECT_apiCallGet = new byte[0];
		static byte[] commonByteArray_TRAININGPROJECT_apiCallGet = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRAININGPROJECT_apiCallGet.length) {
					if (length < 1024 && commonByteArray_TRAININGPROJECT_apiCallGet.length == 0) {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[1024];
					} else {
						commonByteArray_TRAININGPROJECT_apiCallGet = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length);
				strReturn = new String(commonByteArray_TRAININGPROJECT_apiCallGet, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_TRAININGPROJECT_apiCallGet) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTClient_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				consoleLogNativeOutputStruct consoleLogNativeOutput = new consoleLogNativeOutputStruct();
				nativeOutputStruct nativeOutput = new nativeOutputStruct();
				clearedInputStruct clearedInput = new clearedInputStruct();
				consoleLogClearedOutputStruct consoleLogClearedOutput = new consoleLogClearedOutputStruct();
				clearedOutputStruct clearedOutput = new clearedOutputStruct();
				dbInputStruct dbInput = new dbInputStruct();
				clearedOutputSecondTableStruct clearedOutputSecondTable = new clearedOutputSecondTableStruct();
				headquartersOuputStruct headquartersOuput = new headquartersOuputStruct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "consoleLogNativeOutput");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("rawApiOutput");
				util_tLogRow_2.addRow(new String[] { "statusCode", "body", "string", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "consoleLogClearedOutput");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[8];

					public void addRow(String[] row) {

						for (int i = 0; i < 8; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 7 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("transformedJsonOutput");
				util_tLogRow_1.addRow(new String[] { "name", "approxEmployees", "founded", "type", "name1",
						"addressLine1", "locality", "postalCode", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "dbInput");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "GENERAL";
				boolean whetherReject_tDBOutput_1 = false;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 9 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						if (table_tDBOutput_1.equalsIgnoreCase("GENERAL")) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
								+ "\"(\"id\" INT ,\"name\" VARCHAR(30)  ,\"approxEmployees\" INT ,\"founded\" INT ,\"type\" VARCHAR(20)  ,\"name1\" VARCHAR(80)  ,\"addressLine1\" VARCHAR(50)  ,\"locality\" VARCHAR(40)  ,\"postalCode\" VARCHAR(12)  ,primary key(\"id\"))");
					}
				}
				String update_tDBOutput_1 = "UPDATE \"" + "GENERAL"
						+ "\" SET \"name\" = ?,\"approxEmployees\" = ?,\"founded\" = ?,\"type\" = ?,\"name1\" = ?,\"addressLine1\" = ?,\"locality\" = ?,\"postalCode\" = ? WHERE \"id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + "GENERAL"
						+ "\" (\"id\",\"name\",\"approxEmployees\",\"founded\",\"type\",\"name1\",\"addressLine1\",\"locality\",\"postalCode\") VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "clearedOutput");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				dbInputStruct dbInput_tmp = new dbInputStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "headquartersOuput");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "OFFICES";
				boolean whetherReject_tDBOutput_2 = false;

				int updateKeyCount_tDBOutput_2 = 1;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_2 == 6 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				java.sql.Connection conn_tDBOutput_2 = null;
				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_2.next()) {
						String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
						if (table_tDBOutput_2.equalsIgnoreCase("OFFICES")) {
							whetherExist_tDBOutput_2 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE \"" + tableName_tDBOutput_2 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2
							+ "\"(\"id\" INT ,\"officeName\" VARCHAR(80)  ,\"address\" VARCHAR(50)  ,\"locality\" VARCHAR(40)  ,\"postalCode\" VARCHAR(12)  ,\"origin\" VARCHAR(0)  ,primary key(\"id\"))");
				}
				String update_tDBOutput_2 = "UPDATE \"" + "OFFICES"
						+ "\" SET \"officeName\" = ?,\"address\" = ?,\"locality\" = ?,\"postalCode\" = ?,\"origin\" = ? WHERE \"id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
				String insert_tDBOutput_2 = "INSERT INTO \"" + "OFFICES"
						+ "\" (\"id\",\"officeName\",\"address\",\"locality\",\"postalCode\",\"origin\") VALUES (?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "clearedOutputSecondTable");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					Integer id;
					String origin;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				headquartersOuputStruct headquartersOuput_tmp = new headquartersOuputStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tReplicate_2 begin ] start
				 */

				ok_Hash.put("tReplicate_2", false);
				start_Hash.put("tReplicate_2", System.currentTimeMillis());

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "clearedInput");
				}

				int tos_count_tReplicate_2 = 0;

				/**
				 * [tReplicate_2 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "nativeOutput");
				}

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;
				String jsonStr_tExtractJSONFields_1 = "";

				class JsonPathCache_tExtractJSONFields_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 begin ] start
				 */

				ok_Hash.put("tRESTClient_1", false);
				start_Hash.put("tRESTClient_1", System.currentTimeMillis());

				currentComponent = "tRESTClient_1";

				int tos_count_tRESTClient_1 = 0;

				/**
				 * [tRESTClient_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 main ] start
				 */

				currentComponent = "tRESTClient_1";

				row1 = null;

// expected response body
				Object responseDoc_tRESTClient_1 = null;

				try {
					// request body
					org.dom4j.Document requestDoc_tRESTClient_1 = null;
					String requestString_tRESTClient_1 = null;

					Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1
							: requestString_tRESTClient_1;

					// resposne class name
					Class<?> responseClass_tRESTClient_1 = String.class;

					// create web client instance
					org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

					boolean inOSGi = routines.system.BundleUtils.inOSGi();

					final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

					String url = context.APIURL;
					// {baseUri}tRESTClient
					factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
					factoryBean_tRESTClient_1.setAddress(url);

					factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);

					java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
					providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
						// workaround for https://jira.talendforge.org/browse/TESB-7276
						public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls, java.lang.reflect.Type type,
								java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
								javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
								throws IOException, javax.ws.rs.WebApplicationException {
							String contentLength = headers.getFirst("Content-Length");
							if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
									&& Integer.valueOf(contentLength) <= 0) {
								try {
									return org.dom4j.DocumentHelper.parseText("<root/>");
								} catch (org.dom4j.DocumentException e_tRESTClient_1) {
									e_tRESTClient_1.printStackTrace();
								}
								return null;
							}
							return super.readFrom(cls, type, anns, mt, headers, is);
						}
					});
					org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
					jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
					jsonProvider_tRESTClient_1.setAttributesToElements(true);

					jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
					jsonProvider_tRESTClient_1.setWrapperName("root");

					jsonProvider_tRESTClient_1.setDropRootElement(false);
					jsonProvider_tRESTClient_1.setConvertTypesToStrings(false);
					providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
					factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
					factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

					boolean use_auth_tRESTClient_1 = false;

					org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1
							.createWebClient();

					// set request path
					webClient_tRESTClient_1.path("/");

					// set connection properties
					org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient
							.getConfig(webClient_tRESTClient_1);
					org.apache.cxf.transport.http.auth.HttpAuthSupplier httpAuthSupplerHttpConduit = null;
					org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1
							.getHttpConduit();

					if (clientConfig_tRESTClient_1.getEndpoint() != null) {
						org.apache.cxf.service.model.EndpointInfo endpointInfo_tRESTClient_1 = clientConfig_tRESTClient_1
								.getEndpoint().getEndpointInfo();
						if (endpointInfo_tRESTClient_1 != null) {
							endpointInfo_tRESTClient_1.setProperty("enable.webclient.operation.reporting", true);
						}
					}

					if (!inOSGi) {
						conduit_tRESTClient_1.getClient().setReceiveTimeout((long) (60 * 1000L));
						conduit_tRESTClient_1.getClient().setConnectionTimeout((long) (30 * 1000L));
						boolean use_proxy_tRESTClient_1 = false;

					}

					// set Accept-Type
					webClient_tRESTClient_1.accept("*/*");

					// set optional query and header properties if any

					if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
						// set oAuth2 bearer token
						org.apache.cxf.rs.security.oauth2.client.BearerAuthSupplier authSupplier = new org.apache.cxf.rs.security.oauth2.client.BearerAuthSupplier();
						authSupplier.setAccessToken("");
						conduit_tRESTClient_1.setAuthSupplier(authSupplier);
					}

					// if FORM request then capture query parameters into Form, otherwise set them
					// as queries

					try {
						// start send request

						responseDoc_tRESTClient_1 = webClient_tRESTClient_1.get();
						javax.ws.rs.core.Response responseObjBase_tRESTClient_1 = (javax.ws.rs.core.Response) responseDoc_tRESTClient_1;
						int status_tRESTClient_1 = responseObjBase_tRESTClient_1.getStatus();
						if (status_tRESTClient_1 != 304 && status_tRESTClient_1 >= 300
								&& responseClass_tRESTClient_1 != javax.ws.rs.core.Response.class) {
							throw org.apache.cxf.jaxrs.utils.ExceptionUtils.toWebApplicationException(
									(javax.ws.rs.core.Response) responseObjBase_tRESTClient_1);
						}
						if (responseObjBase_tRESTClient_1.getEntity() != null) {
							responseDoc_tRESTClient_1 = responseObjBase_tRESTClient_1
									.readEntity(responseClass_tRESTClient_1);
						}

						int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse().getStatus();
						if (webClientResponseStatus_tRESTClient_1 >= 300) {
							throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_1.getResponse());
						}

						if (row1 == null) {
							row1 = new row1Struct();
						}

						row1.statusCode = webClientResponseStatus_tRESTClient_1;
						row1.string = "";

						{
							Object responseObj_tRESTClient_1 = responseDoc_tRESTClient_1;

							if (responseObj_tRESTClient_1 != null) {
								if (responseClass_tRESTClient_1 == String.class
										&& responseObj_tRESTClient_1 instanceof String) {
									row1.string = (String) responseObj_tRESTClient_1;
								} else {
									routines.system.Document responseTalendDoc_tRESTClient_1 = null;
									if (null != responseObj_tRESTClient_1) {
										responseTalendDoc_tRESTClient_1 = new routines.system.Document();
										if (responseObj_tRESTClient_1 instanceof org.dom4j.Document) {
											responseTalendDoc_tRESTClient_1
													.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
										}
									}
									row1.body = responseTalendDoc_tRESTClient_1;
								}
							}
						}

						globalMap.put("tRESTClient_1_HEADERS", webClient_tRESTClient_1.getResponse().getHeaders());
						globalMap.put("tRESTClient_1_COOKIES", webClient_tRESTClient_1.getResponse().getCookies());

					} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {
						globalMap.put("tRESTClient_1_ERROR_MESSAGE", ex_tRESTClient_1.getMessage());

						throw ex_tRESTClient_1;

					}

				} catch (Exception e_tRESTClient_1) {
					globalMap.put("tRESTClient_1_ERROR_MESSAGE", e_tRESTClient_1.getMessage());

					throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);

				}

				tos_count_tRESTClient_1++;

				/**
				 * [tRESTClient_1 main ] stop
				 */

				/**
				 * [tRESTClient_1 process_data_begin ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_begin ] stop
				 */
// Start of branch "row1"
				if (row1 != null) {

					/**
					 * [tReplicate_1 main ] start
					 */

					currentComponent = "tReplicate_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row1"

						);
					}

					consoleLogNativeOutput = new consoleLogNativeOutputStruct();

					consoleLogNativeOutput.statusCode = row1.statusCode;
					consoleLogNativeOutput.body = row1.body;
					consoleLogNativeOutput.string = row1.string;
					nativeOutput = new nativeOutputStruct();

					nativeOutput.statusCode = row1.statusCode;
					nativeOutput.body = row1.body;
					nativeOutput.string = row1.string;

					tos_count_tReplicate_1++;

					/**
					 * [tReplicate_1 main ] stop
					 */

					/**
					 * [tReplicate_1 process_data_begin ] start
					 */

					currentComponent = "tReplicate_1";

					/**
					 * [tReplicate_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 main ] start
					 */

					currentComponent = "tLogRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "consoleLogNativeOutput"

						);
					}

///////////////////////		

					String[] row_tLogRow_2 = new String[3];

					if (consoleLogNativeOutput.statusCode != null) { //
						row_tLogRow_2[0] = String.valueOf(consoleLogNativeOutput.statusCode);

					} //

					if (consoleLogNativeOutput.body != null) { //
						row_tLogRow_2[1] = String.valueOf(consoleLogNativeOutput.body);

					} //

					if (consoleLogNativeOutput.string != null) { //
						row_tLogRow_2[2] = String.valueOf(consoleLogNativeOutput.string);

					} //

					util_tLogRow_2.addRow(row_tLogRow_2);
					nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_2++;

					/**
					 * [tLogRow_2 main ] stop
					 */

					/**
					 * [tLogRow_2 process_data_begin ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 process_data_end ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_end ] stop
					 */

					/**
					 * [tExtractJSONFields_1 main ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "nativeOutput"

						);
					}

					if (nativeOutput.string != null) {// C_01
						jsonStr_tExtractJSONFields_1 = nativeOutput.string.toString();

						clearedInput = null;

						String loopPath_tExtractJSONFields_1 = "$";
						java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

						boolean isStructError_tExtractJSONFields_1 = true;
						com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
						try {
							document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
									.parse(jsonStr_tExtractJSONFields_1);
							com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
									.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
							Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1
									.read(compiledLoopPath_tExtractJSONFields_1, net.minidev.json.JSONObject.class);
							if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
								resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
							} else {
								resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
							}

							isStructError_tExtractJSONFields_1 = false;
						} catch (java.lang.Exception ex_tExtractJSONFields_1) {
							globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE", ex_tExtractJSONFields_1.getMessage());
							System.err.println(ex_tExtractJSONFields_1.getMessage());
						}

						String jsonPath_tExtractJSONFields_1 = null;
						com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

						Object value_tExtractJSONFields_1 = null;

						Object root_tExtractJSONFields_1 = null;
						for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
								|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
										.size()); i_tExtractJSONFields_1++) {
							if (!isStructError_tExtractJSONFields_1) {
								Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
										.get(i_tExtractJSONFields_1);
								clearedInput = null;
								clearedInput = new clearedInputStruct();
								nb_line_tExtractJSONFields_1++;
								try {
									jsonPath_tExtractJSONFields_1 = "organization.name";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
											if (root_tExtractJSONFields_1 == null) {
												root_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
														jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath("$"));
											}
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(root_tExtractJSONFields_1);
										} else {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
										}
										clearedInput.name = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										clearedInput.name =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "organization.approxEmployees";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
											if (root_tExtractJSONFields_1 == null) {
												root_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
														jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath("$"));
											}
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(root_tExtractJSONFields_1);
										} else {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
										}
										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											clearedInput.approxEmployees = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											clearedInput.approxEmployees =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										clearedInput.approxEmployees =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "organization.founded";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
											if (root_tExtractJSONFields_1 == null) {
												root_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
														jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath("$"));
											}
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(root_tExtractJSONFields_1);
										} else {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
										}
										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											clearedInput.founded = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											clearedInput.founded =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										clearedInput.founded =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "industries[*].type";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
											if (root_tExtractJSONFields_1 == null) {
												root_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
														jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath("$"));
											}
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(root_tExtractJSONFields_1);
										} else {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
										}
										clearedInput.type = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										clearedInput.type =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "industries[*].name";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
											if (root_tExtractJSONFields_1 == null) {
												root_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
														jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath("$"));
											}
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(root_tExtractJSONFields_1);
										} else {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
										}
										clearedInput.name1 = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										clearedInput.name1 =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "organization.contactInfo.addresses[*].addressLine1";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
											if (root_tExtractJSONFields_1 == null) {
												root_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
														jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath("$"));
											}
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(root_tExtractJSONFields_1);
										} else {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
										}
										clearedInput.addressLine1 = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										clearedInput.addressLine1 =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "organization.contactInfo.addresses[*].locality";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
											if (root_tExtractJSONFields_1 == null) {
												root_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
														jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath("$"));
											}
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(root_tExtractJSONFields_1);
										} else {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
										}
										clearedInput.locality = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										clearedInput.locality =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "organization.contactInfo.addresses[*].postalCode";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										if (jsonPath_tExtractJSONFields_1.startsWith("$")) {
											if (root_tExtractJSONFields_1 == null) {
												root_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
														jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath("$"));
											}
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(root_tExtractJSONFields_1);
										} else {
											value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
													.read(row_tExtractJSONFields_1);
										}
										clearedInput.postalCode = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										clearedInput.postalCode =

												null

										;
									}
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
											ex_tExtractJSONFields_1.getMessage());
									System.err.println(ex_tExtractJSONFields_1.getMessage());
									clearedInput = null;
								}

							}

							isStructError_tExtractJSONFields_1 = false;

//}

							tos_count_tExtractJSONFields_1++;

							/**
							 * [tExtractJSONFields_1 main ] stop
							 */

							/**
							 * [tExtractJSONFields_1 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							/**
							 * [tExtractJSONFields_1 process_data_begin ] stop
							 */
// Start of branch "clearedInput"
							if (clearedInput != null) {

								/**
								 * [tReplicate_2 main ] start
								 */

								currentComponent = "tReplicate_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "clearedInput"

									);
								}

								consoleLogClearedOutput = new consoleLogClearedOutputStruct();

								consoleLogClearedOutput.name = clearedInput.name;
								consoleLogClearedOutput.approxEmployees = clearedInput.approxEmployees;
								consoleLogClearedOutput.founded = clearedInput.founded;
								consoleLogClearedOutput.type = clearedInput.type;
								consoleLogClearedOutput.name1 = clearedInput.name1;
								consoleLogClearedOutput.addressLine1 = clearedInput.addressLine1;
								consoleLogClearedOutput.locality = clearedInput.locality;
								consoleLogClearedOutput.postalCode = clearedInput.postalCode;
								clearedOutput = new clearedOutputStruct();

								clearedOutput.name = clearedInput.name;
								clearedOutput.approxEmployees = clearedInput.approxEmployees;
								clearedOutput.founded = clearedInput.founded;
								clearedOutput.type = clearedInput.type;
								clearedOutput.name1 = clearedInput.name1;
								clearedOutput.addressLine1 = clearedInput.addressLine1;
								clearedOutput.locality = clearedInput.locality;
								clearedOutput.postalCode = clearedInput.postalCode;
								clearedOutputSecondTable = new clearedOutputSecondTableStruct();

								clearedOutputSecondTable.name = clearedInput.name;
								clearedOutputSecondTable.approxEmployees = clearedInput.approxEmployees;
								clearedOutputSecondTable.founded = clearedInput.founded;
								clearedOutputSecondTable.type = clearedInput.type;
								clearedOutputSecondTable.name1 = clearedInput.name1;
								clearedOutputSecondTable.addressLine1 = clearedInput.addressLine1;
								clearedOutputSecondTable.locality = clearedInput.locality;
								clearedOutputSecondTable.postalCode = clearedInput.postalCode;

								tos_count_tReplicate_2++;

								/**
								 * [tReplicate_2 main ] stop
								 */

								/**
								 * [tReplicate_2 process_data_begin ] start
								 */

								currentComponent = "tReplicate_2";

								/**
								 * [tReplicate_2 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "consoleLogClearedOutput"

									);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[8];

								if (consoleLogClearedOutput.name != null) { //
									row_tLogRow_1[0] = String.valueOf(consoleLogClearedOutput.name);

								} //

								if (consoleLogClearedOutput.approxEmployees != null) { //
									row_tLogRow_1[1] = String.valueOf(consoleLogClearedOutput.approxEmployees);

								} //

								if (consoleLogClearedOutput.founded != null) { //
									row_tLogRow_1[2] = String.valueOf(consoleLogClearedOutput.founded);

								} //

								if (consoleLogClearedOutput.type != null) { //
									row_tLogRow_1[3] = String.valueOf(consoleLogClearedOutput.type);

								} //

								if (consoleLogClearedOutput.name1 != null) { //
									row_tLogRow_1[4] = String.valueOf(consoleLogClearedOutput.name1);

								} //

								if (consoleLogClearedOutput.addressLine1 != null) { //
									row_tLogRow_1[5] = String.valueOf(consoleLogClearedOutput.addressLine1);

								} //

								if (consoleLogClearedOutput.locality != null) { //
									row_tLogRow_1[6] = String.valueOf(consoleLogClearedOutput.locality);

								} //

								if (consoleLogClearedOutput.postalCode != null) { //
									row_tLogRow_1[7] = String.valueOf(consoleLogClearedOutput.postalCode);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "clearedOutput"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									dbInput = null;

// # Output table : 'dbInput'
									dbInput_tmp.id = 1;
									dbInput_tmp.name = clearedOutput.name;
									dbInput_tmp.approxEmployees = clearedOutput.approxEmployees;
									dbInput_tmp.founded = clearedOutput.founded;
									dbInput_tmp.type = clearedOutput.type;
									dbInput_tmp.name1 = clearedOutput.name1;
									dbInput_tmp.addressLine1 = clearedOutput.addressLine1;
									dbInput_tmp.locality = clearedOutput.locality;
									dbInput_tmp.postalCode = clearedOutput.postalCode;
									dbInput = dbInput_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "dbInput"
								if (dbInput != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "dbInput"

										);
									}

									whetherReject_tDBOutput_1 = false;
									int updateFlag_tDBOutput_1 = 0;
									if (dbInput.name == null) {
										pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(1, dbInput.name);
									}

									if (dbInput.approxEmployees == null) {
										pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(2, dbInput.approxEmployees);
									}

									if (dbInput.founded == null) {
										pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(3, dbInput.founded);
									}

									if (dbInput.type == null) {
										pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(4, dbInput.type);
									}

									if (dbInput.name1 == null) {
										pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(5, dbInput.name1);
									}

									if (dbInput.addressLine1 == null) {
										pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(6, dbInput.addressLine1);
									}

									if (dbInput.locality == null) {
										pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(7, dbInput.locality);
									}

									if (dbInput.postalCode == null) {
										pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(8, dbInput.postalCode);
									}

									if (dbInput.id == null) {
										pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_1.setInt(9, dbInput.id);
									}

									try {
										updateFlag_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
										updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + updateFlag_tDBOutput_1;
										rowsToCommitCount_tDBOutput_1 += updateFlag_tDBOutput_1;
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_1 = true;
										System.err.print(e.getMessage());
									}
									if (updateFlag_tDBOutput_1 == 0) {

										if (dbInput.id == null) {
											pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(1, dbInput.id);
										}

										if (dbInput.name == null) {
											pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(2, dbInput.name);
										}

										if (dbInput.approxEmployees == null) {
											pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(3, dbInput.approxEmployees);
										}

										if (dbInput.founded == null) {
											pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(4, dbInput.founded);
										}

										if (dbInput.type == null) {
											pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(5, dbInput.type);
										}

										if (dbInput.name1 == null) {
											pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(6, dbInput.name1);
										}

										if (dbInput.addressLine1 == null) {
											pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(7, dbInput.addressLine1);
										}

										if (dbInput.locality == null) {
											pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(8, dbInput.locality);
										}

										if (dbInput.postalCode == null) {
											pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(9, dbInput.postalCode);
										}

										try {
											int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
											insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
											rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
											nb_line_tDBOutput_1++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_1 = true;
											nb_line_tDBOutput_1++;
											System.err.print(e.getMessage());
										}
									} else {
										nb_line_tDBOutput_1++;

									}
									if (!whetherReject_tDBOutput_1) {
									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "dbInput"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "clearedOutputSecondTable"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;
									Var.id = Numeric.sequence("s1", 1, 1);
									Var.origin = null;// ###############################
									// ###############################
									// # Output tables

									headquartersOuput = null;

// # Output table : 'headquartersOuput'
									headquartersOuput_tmp.id = Var.id;
									headquartersOuput_tmp.name1 = "Siege Social";
									headquartersOuput_tmp.addressLine1 = clearedOutputSecondTable.addressLine1;
									headquartersOuput_tmp.locality = clearedOutputSecondTable.locality;
									headquartersOuput_tmp.postalCode = clearedOutputSecondTable.postalCode;
									headquartersOuput_tmp.origin = "ApiCallJson";
									headquartersOuput = headquartersOuput_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */

								/**
								 * [tMap_2 process_data_begin ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_begin ] stop
								 */
// Start of branch "headquartersOuput"
								if (headquartersOuput != null) {

									/**
									 * [tDBOutput_2 main ] start
									 */

									currentComponent = "tDBOutput_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "headquartersOuput"

										);
									}

									whetherReject_tDBOutput_2 = false;
									int updateFlag_tDBOutput_2 = 0;
									if (headquartersOuput.name1 == null) {
										pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(1, headquartersOuput.name1);
									}

									if (headquartersOuput.addressLine1 == null) {
										pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(2, headquartersOuput.addressLine1);
									}

									if (headquartersOuput.locality == null) {
										pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(3, headquartersOuput.locality);
									}

									if (headquartersOuput.postalCode == null) {
										pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(4, headquartersOuput.postalCode);
									}

									if (headquartersOuput.origin == null) {
										pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_2.setString(5, headquartersOuput.origin);
									}

									if (headquartersOuput.id == null) {
										pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tDBOutput_2.setInt(6, headquartersOuput.id);
									}

									try {
										updateFlag_tDBOutput_2 = pstmtUpdate_tDBOutput_2.executeUpdate();
										updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + updateFlag_tDBOutput_2;
										rowsToCommitCount_tDBOutput_2 += updateFlag_tDBOutput_2;
									} catch (java.lang.Exception e) {
										globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
										whetherReject_tDBOutput_2 = true;
										System.err.print(e.getMessage());
									}
									if (updateFlag_tDBOutput_2 == 0) {

										if (headquartersOuput.id == null) {
											pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_2.setInt(1, headquartersOuput.id);
										}

										if (headquartersOuput.name1 == null) {
											pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(2, headquartersOuput.name1);
										}

										if (headquartersOuput.addressLine1 == null) {
											pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(3, headquartersOuput.addressLine1);
										}

										if (headquartersOuput.locality == null) {
											pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(4, headquartersOuput.locality);
										}

										if (headquartersOuput.postalCode == null) {
											pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(5, headquartersOuput.postalCode);
										}

										if (headquartersOuput.origin == null) {
											pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_2.setString(6, headquartersOuput.origin);
										}

										try {
											int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
											insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
											rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
											nb_line_tDBOutput_2++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_2 = true;
											nb_line_tDBOutput_2++;
											System.err.print(e.getMessage());
										}
									} else {
										nb_line_tDBOutput_2++;

									}
									if (!whetherReject_tDBOutput_2) {
									}

									tos_count_tDBOutput_2++;

									/**
									 * [tDBOutput_2 main ] stop
									 */

									/**
									 * [tDBOutput_2 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_2";

									/**
									 * [tDBOutput_2 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_2 process_data_end ] start
									 */

									currentComponent = "tDBOutput_2";

									/**
									 * [tDBOutput_2 process_data_end ] stop
									 */

								} // End of branch "headquartersOuput"

								/**
								 * [tMap_2 process_data_end ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_end ] stop
								 */

								/**
								 * [tReplicate_2 process_data_end ] start
								 */

								currentComponent = "tReplicate_2";

								/**
								 * [tReplicate_2 process_data_end ] stop
								 */

							} // End of branch "clearedInput"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_1 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					/**
					 * [tExtractJSONFields_1 process_data_end ] stop
					 */

					/**
					 * [tReplicate_1 process_data_end ] start
					 */

					currentComponent = "tReplicate_1";

					/**
					 * [tReplicate_1 process_data_end ] stop
					 */

				} // End of branch "row1"

				/**
				 * [tRESTClient_1 process_data_end ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_end ] stop
				 */

				/**
				 * [tRESTClient_1 end ] start
				 */

				currentComponent = "tRESTClient_1";

				if (globalMap.get("tRESTClient_1_NB_LINE") == null) {
					globalMap.put("tRESTClient_1_NB_LINE", 1);
				}

// [tRESTCliend_end]

				ok_Hash.put("tRESTClient_1", true);
				end_Hash.put("tRESTClient_1", System.currentTimeMillis());

				/**
				 * [tRESTClient_1 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "consoleLogNativeOutput");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "nativeOutput");
				}

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tReplicate_2 end ] start
				 */

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "clearedInput");
				}

				ok_Hash.put("tReplicate_2", true);
				end_Hash.put("tReplicate_2", System.currentTimeMillis());

				/**
				 * [tReplicate_2 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "consoleLogClearedOutput");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "clearedOutput");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				int rejectedCount_tDBOutput_1 = 0;
				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "dbInput");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "clearedOutputSecondTable");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (pstmtUpdate_tDBOutput_2 != null) {
					pstmtUpdate_tDBOutput_2.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_2");
				}
				if (pstmtInsert_tDBOutput_2 != null) {
					pstmtInsert_tDBOutput_2.close();
					resourceMap.remove("pstmtInsert_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				int rejectedCount_tDBOutput_2 = 0;
				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "headquartersOuput");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBCommit_2Process(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRESTClient_1 finally ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tReplicate_2 finally ] start
				 */

				currentComponent = "tReplicate_2";

				/**
				 * [tReplicate_2 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
					if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_1")) != null) {
						pstmtUpdateToClose_tDBOutput_1.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
					if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_1")) != null) {
						pstmtInsertToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
					if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtUpdate_tDBOutput_2")) != null) {
						pstmtUpdateToClose_tDBOutput_2.close();
					}
					java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
					if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmtInsert_tDBOutput_2")) != null) {
						pstmtInsertToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final apiCallGet apiCallGetClass = new apiCallGet();

		int exitCode = apiCallGetClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = apiCallGet.class.getClassLoader()
					.getResourceAsStream("trainingproject/apicallget_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = apiCallGet.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("DBPATH", "id_String");
					if (context.getStringValue("DBPATH") == null) {
						context.DBPATH = null;
					} else {
						context.DBPATH = (String) context.getProperty("DBPATH");
					}
					context.setContextType("DBNAME", "id_String");
					if (context.getStringValue("DBNAME") == null) {
						context.DBNAME = null;
					} else {
						context.DBNAME = (String) context.getProperty("DBNAME");
					}
					context.setContextType("APIURL", "id_String");
					if (context.getStringValue("APIURL") == null) {
						context.APIURL = null;
					} else {
						context.APIURL = (String) context.getProperty("APIURL");
					}
					context.setContextType("LOGFILEPATH", "id_String");
					if (context.getStringValue("LOGFILEPATH") == null) {
						context.LOGFILEPATH = null;
					} else {
						context.LOGFILEPATH = (String) context.getProperty("LOGFILEPATH");
					}
					context.setContextType("LOGFILENAME", "id_String");
					if (context.getStringValue("LOGFILENAME") == null) {
						context.LOGFILENAME = null;
					} else {
						context.LOGFILENAME = (String) context.getProperty("LOGFILENAME");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("DBPATH")) {
				context.DBPATH = (String) parentContextMap.get("DBPATH");
			}
			if (parentContextMap.containsKey("DBNAME")) {
				context.DBNAME = (String) parentContextMap.get("DBNAME");
			}
			if (parentContextMap.containsKey("APIURL")) {
				context.APIURL = (String) parentContextMap.get("APIURL");
			}
			if (parentContextMap.containsKey("LOGFILEPATH")) {
				context.LOGFILEPATH = (String) parentContextMap.get("LOGFILEPATH");
			}
			if (parentContextMap.containsKey("LOGFILENAME")) {
				context.LOGFILENAME = (String) parentContextMap.get("LOGFILENAME");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRESTClient_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRESTClient_1) {
			globalMap.put("tRESTClient_1_SUBPROCESS_STATE", -1);

			e_tRESTClient_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : apiCallGet");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 487231 characters generated by Talend Open Studio for Big Data on the 23
 * juillet 2022 à 04:51:03 CEST
 ************************************************************************************************/